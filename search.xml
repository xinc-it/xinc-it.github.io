<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Buttterfly美化教程集合</title>
    <url>/2021/12/20/Buttterfly%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-设置背景渐变效果"><a href="#1-设置背景渐变效果" class="headerlink" title="1. 设置背景渐变效果"></a>1. 设置背景渐变效果</h1><h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640016968691-40cf8542-0c0d-476f-a342-ef7803df0029.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=167&amp;id=ua08fe870&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=1134&amp;originalType=binary&amp;ratio=1&amp;size=156444&amp;status=done&amp;style=none&amp;taskId=u6648ddf4-3cf6-4796-94e8-d4a74dfc23b&amp;width=567" alt="image.png"></p>
<h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置。 由于每个人用的 butterfly 版本不同，所以修改的不一定是#body-wrap。具体需要通过在页面上使用<code>F12</code>，查看标签对应的 id。<img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017441534-b130e721-df0c-4ca7-b538-913c9c50d77f.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;id=u3e0effb6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=27&amp;originWidth=419&amp;originalType=binary&amp;ratio=1&amp;size=3831&amp;status=done&amp;style=none&amp;taskId=u8e1396fd-4db0-4b4e-beb8-da4f152e19a" alt="image.png"></li>
</ol>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改文章页背景及透明度 */</span></span><br><span class="line"><span class="selector-id">#body-wrap</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="2-页脚渐变透明"><a href="#2-页脚渐变透明" class="headerlink" title="2. 页脚渐变透明"></a>2. 页脚渐变透明</h1><h2 id="1-效果图-1"><a href="#1-效果图-1" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017580407-35c4e83d-2e35-4bb0-b987-02d04521b0db.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=106&amp;id=uc27f3f41&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=211&amp;originWidth=1752&amp;originalType=binary&amp;ratio=1&amp;size=33379&amp;status=done&amp;style=none&amp;taskId=ubaba17b1-ed4e-429d-93fd-31a2418926b&amp;width=876" alt="image.png"></p>
<h2 id="2-步骤-1"><a href="#2-步骤-1" class="headerlink" title="2. 步骤"></a>2. 步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置</li>
</ol>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明渐变 */</span></span><br><span class="line"><span class="selector-id">#footer</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">100%</span>) <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-页脚徽标设置"><a href="#3-页脚徽标设置" class="headerlink" title="3. 页脚徽标设置"></a>3. 页脚徽标设置</h1><h2 id="1-效果图-2"><a href="#1-效果图-2" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017751461-338d3075-c47d-4fc5-9e9b-e6d863333636.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=30&amp;id=u8575727c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=59&amp;originWidth=878&amp;originalType=binary&amp;ratio=1&amp;size=10582&amp;status=done&amp;style=none&amp;taskId=uefa87f9e-ab64-4c2c-b25f-6ead943b2af&amp;width=439" alt="image.png"></p>
<h2 id="2-步骤-2"><a href="#2-步骤-2" class="headerlink" title="2.步骤"></a>2.步骤</h2><p>在_cofing.yml 中添加如下配置</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;p&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://hexo.io/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo"</span> <span class="string">title="博客框架为</span> <span class="string">Hexo"</span> <span class="string">alt="HEXO"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://butterfly.js.org/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender"</span> <span class="string">title="主题采用</span> <span class="string">Butterfly"</span> <span class="string">alt="Butterfly"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://www.jsdelivr.com/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr"</span> <span class="string">title="本站使用</span> <span class="string">Jsdelivr</span> <span class="string">为静态资源提供CDN加速"</span> <span class="string">alt="Jsdelivr"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://github.com/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub"</span> <span class="string">title="本站项目由</span> <span class="string">GitHub</span> <span class="string">托管"</span> <span class="string">alt="GitHub"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris"</span> <span class="string">alt="img"</span> <span class="string">title="本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可"&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>目录名</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-汉明距离</title>
    <url>/2021/01/16/LeetCode-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/eb8bf20167f1cc2d7f1d9c054ec9d21b.png#id=rp6JQ&amp;originHeight=609&amp;originWidth=745&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>这里有两种解题思路</p>
<h2 id="1-位运算法"><a href="#1-位运算法" class="headerlink" title="1. 位运算法"></a>1. 位运算法</h2><p><strong>位运算</strong>如果你不了解的话，可以看下第二种解题思路。但是整体代码有点冗余，而且效率也不高。<br><code>^</code>的运算规则二进制位中各个位上数就是相同为 0，不同为 1。<br><code>&amp;</code>的运算规则是都为 1 时结果为 1，反之全为 0。<br><code>|</code>的运算规则是只要有 1 结果为 1，反之为 0。<br><code>&gt;&gt;</code>当前数二级制向右移一位，同时最高位根据数的正负来补 0 或 1<br><code>&lt;&lt;</code> 当前数二进制向左移一位，同时最低位补 0。</p>
<p><strong>位运算法</strong></p>
<ol>
<li> 将两个数<code>^</code>运算</li>
<li>判断运算结果中 1 的个数。即为两个数二进制中各个位的值不同的个数<br> 这里有两种计算 1 个数的方法<br> 2.1.1 &nbsp; 将运算结果按 2 求余，如果为 1 就个数加 1。反之就忽略<br> 2.1.2 将运算结果右移一位。并重复上述步骤 32 次。<br> 2.2.1 将运算结果和运算结果-1 进行<code>&amp;</code>运算，然后将值返回作为新的运算结果。1 的个数加 1。<br> 2.2.2 直到运算结果为 0 时跳出循环</li>
</ol>
<h2 id="2-暴力破解法"><a href="#2-暴力破解法" class="headerlink" title="2. 暴力破解法"></a>2. 暴力破解法</h2><ol>
<li>将上述两个数将其二进制位分别放入到不同的 List 容器中</li>
<li>判断两个容器的长度，将长度较大的容器作为遍历次数</li>
<li>获取两个容器中当前索引的值，并判断是否相等，如果不等距离加 1</li>
<li>如果较小容器遍历完了的话，就判断较大容器中的值是否等于 0。如果不等距离加 1</li>
<li>最后得到的距离即为结果</li>
</ol>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">     <span class="keyword">int</span> res=x^y;</span><br><span class="line">     <span class="keyword">int</span> times=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(res!=<span class="number">0</span>){</span><br><span class="line">       res=res&amp;(res-<span class="number">1</span>);</span><br><span class="line">       times++;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> times;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2.暴力破解"></a>2.暴力破解</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">       ArrayList&lt;Integer&gt; xArray=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">do</span>{</span><br><span class="line">       xArray.add(x%<span class="number">2</span>);</span><br><span class="line">       x=x/<span class="number">2</span>;</span><br><span class="line">     }<span class="keyword">while</span>(x!=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Integer&gt; yArray=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">do</span>{</span><br><span class="line">       yArray.add(y%<span class="number">2</span>);</span><br><span class="line">       y=y/<span class="number">2</span>;</span><br><span class="line">     }<span class="keyword">while</span>(y!=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> distance=<span class="number">0</span>;</span><br><span class="line">       <span class="comment">//当y的二进制更长时</span></span><br><span class="line">       <span class="keyword">if</span>(yArray.size()&gt;=xArray.size()){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;yArray.size();j++){</span><br><span class="line">                <span class="keyword">if</span>(j&lt;xArray.size()){</span><br><span class="line">                   <span class="keyword">if</span>(yArray.get(j)!=xArray.get(j)){</span><br><span class="line">                       distance++;</span><br><span class="line">                   }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(yArray.get(j)!=<span class="number">0</span>){</span><br><span class="line">                        distance++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">       }<span class="keyword">else</span>{<span class="comment">//x的二进制更长</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;xArray.size();j++){</span><br><span class="line">               <span class="keyword">if</span>(j&lt;yArray.size()){</span><br><span class="line">                   <span class="keyword">if</span>(yArray.get(j)!=xArray.get(j)){</span><br><span class="line">                       distance++;</span><br><span class="line">                   }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(xArray.get(j)!=<span class="number">0</span>){</span><br><span class="line">                        distance++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> distance;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我一开始使用的暴力破解法。但觉得暴力破解法太麻烦了。所以就去看了官方的解题教程，发现位运算这一方法更为简单和高效。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode 合并二叉树</title>
    <url>/2021/07/23/LeetCode%20%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="https://img-blog.csdnimg.cn/0344e196bab241ed866b13e6c08896fb.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=pQeNT&amp;originHeight=689&amp;originWidth=827&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><a href="https://leetcode-cn.com/problems/container-with-most-water/">题目链接</a></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>这题其实就是要求那两个点的面积最大。有两种解题思路。</p>
<h2 id="1-暴力破解"><a href="#1-暴力破解" class="headerlink" title="1. 暴力破解"></a>1. 暴力破解</h2><p>通过两层循环遍历任意两点的所有组合情况，然后求出两点的面积值，然后取最大值。<br>这种方法是最容易想到的。但是当我们使用这种方法提交上去时，会出现超时错误。不要问我为什么！！！懂得都懂。所以我们要通过一种要想出一种时间复杂度更低的方法。</p>
<h2 id="2-双指针法"><a href="#2-双指针法" class="headerlink" title="2.双指针法"></a>2.双指针法</h2><p>首先双层循环时肯定不行的，所以我们就来试试单层循环。单层循环我们要获取最大的面积我们首先要确定如何遍历。这点很关键!!!我们不能再向之前双层循环从头遍历到尾。单层循环我们需要通过从两头开始遍历。那这就产生了一种限制。我们每次往中间移的话长度都是再变小！！！然后我们又不希望要获取面积的慢慢随着长度的变小而变小，所以我们需要让我们的高度变高。而高度是由较小的高度来决定，所以我们要让高度变大，只需要让高度较小的一番往中间移。当两条线重合或者超过的时候就遍历完了。</p>
<h1 id="二、方法代码"><a href="#二、方法代码" class="headerlink" title="二、方法代码"></a>二、方法代码</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//暴力破解</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height.length - <span class="number">1</span>; i++) {</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; height.length; j++) {</span><br><span class="line">        <span class="keyword">int</span> largeHeight = height[i] &gt; height[j] ? height[j] : height[i];</span><br><span class="line">        <span class="keyword">int</span> area = largeHeight * (j - i);</span><br><span class="line">        System.out.println();</span><br><span class="line">        <span class="keyword">if</span> (area &gt; maxArea) {</span><br><span class="line">          maxArea = area;</span><br><span class="line">        }</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment">///双指针法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxArea</span><span class="params">(<span class="keyword">int</span>[] height)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> maxArea = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> j = height.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; j; ) {</span><br><span class="line">      <span class="keyword">int</span> area;</span><br><span class="line">      <span class="keyword">if</span> (height[i] &lt;= height[j]) {</span><br><span class="line">        area = height[i] * (j - i);</span><br><span class="line">        i++;</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        area = height[j] * (j - i);</span><br><span class="line">        j--;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (maxArea &lt; area) {</span><br><span class="line">        maxArea = area;</span><br><span class="line">      }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> maxArea;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这题的暴力破解法其实很多人应该都可以想得到，比较难想到得是第二种，这里很巧妙的利用随着直线不断往中间靠拢，长度在不断的减小，而我们不想让面积随着长度得较小而较小，所以就需要高度不断增加，所以我们每次都要移动长度较小的一方，已达到长度得增加，从而可能产生面积得增长。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-求二叉树的最大深度</title>
    <url>/2021/01/17/LeetCode-%E6%B1%82%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
    <content><![CDATA[<html><head></head><body><p><a href="%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95">
</a></p>
<h1 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h1><p><img src="https://img-blog.csdnimg.cn/20210117094814654.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=VYwer&amp;originHeight=520&amp;originWidth=740&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><strong>题目链接：</strong><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>通过递归的方式，不断遍历其树的每一个节点。然后判断当前节点是否为空，不为空高度加 1,同时遍历当前节点的子节点，然后比较左右两节点的高度，返回最大的节点高度。反之则直接返回上一节点的高度。</p>
<h1 id="二、解题步骤"><a href="#二、解题步骤" class="headerlink" title="二、解题步骤"></a>二、解题步骤</h1><h2 id="1-详细步骤"><a href="#1-详细步骤" class="headerlink" title="1.详细步骤"></a>1.详细步骤</h2><ol>
<li>判断当前节点是否为空<ul>
<li>如果为空，直接返回上一节点的高度</li>
<li>反之高度加 1 ，并执行下一步</li>
</ul>
</li>
<li>继续递归调用该函数，将其节点设置为当前节点，同时高度设置为当前节点的高度。并设置变量用于获取函数的返回值。</li>
<li>比较左右两个节点函数返回值，取其最大值。</li>
</ol>
<h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><p>代码如下：</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> maxHeight(root,<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxHeight</span><span class="params">(TreeNode root,<span class="keyword">int</span> height)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>){</span><br><span class="line">            height++;</span><br><span class="line">            <span class="keyword">int</span> leftHeight=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> rightHeight=<span class="number">0</span>;</span><br><span class="line">            leftHeight=maxHeight(root.left,height);</span><br><span class="line">            rightHeight=maxHeight(root.right,height);</span><br><span class="line">            <span class="keyword">return</span> leftHeight&gt;rightHeight?leftHeight:rightHeight;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> height;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>这里面主要用到了递归的思想。递归在与树有关的很多的题目都可以使用该思想。通过该思想可以很大程度上简化代码。但是也不是没有缺点，如果递归次数过多的话，可能会造成堆栈溢出。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之合并二叉树</title>
    <url>/2020/12/19/LeetCode%E4%B9%8B%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>​</p>
<p>​</p>
<h1 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h2><p><img src="https://img-blog.csdnimg.cn/20201219005707214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=ZaF2E&amp;originHeight=739&amp;originWidth=698&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h2><p>采用递归和后序遍历的方式来同时遍历两棵树。遍历的同时，一定要判断两颗树的当前节点是否为空。然后创建一个新的节点，节点值为两个节点之和。遍历完成后即可得到合并后的树。</p>
<h2 id="3-解题步骤"><a href="#3-解题步骤" class="headerlink" title="3. 解题步骤"></a>3. 解题步骤</h2><ol>
<li> 判断当前两颗树的节点全为空，如果为空则返回空。</li>
<li> 反之有以下三种</li>
</ol>
<ul>
<li>可能两个节点都不为空</li>
<li>左节点为空，右节点不为空</li>
<li>右节点为空，左节点不为空</li>
</ul>
<ol start="3">
<li> 采取以下措施</li>
</ol>
<ul>
<li>当为第一种情况时 ,创建一个新的节点，节点值为左右节点值的和,之后遍历左右节点</li>
<li>当为第二种情况时 ,创建一个新的节点，节点值为右节点值,之后遍历右节点.</li>
<li>当为第三种情况时 ,创建一个新的节点，节点值为左节点值,之后遍历左节点。</li>
</ul>
<ol start="4">
<li> 返回创建的新的节点。</li>
</ol>
<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="keyword">null</span>&amp;&amp;t2==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            TreeNode t3;</span><br><span class="line">            <span class="keyword">if</span>(t1!=<span class="keyword">null</span>&amp;&amp;t2!=<span class="keyword">null</span>){</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t1.val+t2.val);</span><br><span class="line">                t3.right=mergeTrees(t1.right,t2.right);</span><br><span class="line">                t3.left=mergeTrees(t1.left,t2.left);</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(t1!=<span class="keyword">null</span>){</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t1.val);</span><br><span class="line">                t3.right=mergeTrees(t1.right,<span class="keyword">null</span>);</span><br><span class="line">                t3.left=mergeTrees(t1.left,<span class="keyword">null</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t2.val);</span><br><span class="line">                t3.right=mergeTrees(<span class="keyword">null</span>,t2.right);</span><br><span class="line">                t3.left=mergeTrees(<span class="keyword">null</span>,t2.left);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> t3;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>以目前我做的与树相关的题目来说。所需要做的事基本上就是一件事：<strong>遍历</strong>。而树的遍历一般可以通过递归的方式来进行一些简单的遍历。遍历一般分为三种：前序遍历、中序遍历、后序遍历。前序、中序、后序的名字是按照遍历中父节点，相对于左右子节点中的顺序。如果父节点，在其子父节点中最后一个遍历，称之为后序遍历。其他的遍历顺序可由以上类推。<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode将有序数组转化为二叉搜索树</title>
    <url>/2020/12/20/LeetCode%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、将有序数组转化为二叉搜索树"><a href="#一、将有序数组转化为二叉搜索树" class="headerlink" title="一、将有序数组转化为二叉搜索树"></a>一、将有序数组转化为二叉搜索树</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/20201219235754380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=a4Uzj&amp;originHeight=547&amp;originWidth=573&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><strong>详情链接：</strong><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">有序数组转二叉树</a></p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-解题思路"><a href="#1-解题思路" class="headerlink" title="1.解题思路"></a>1.解题思路</h2><p>将当前数组的中间值用于创建当前的节点，然后中间值左边的数，分为一个新的子数组，这里我们暂且叫左子数组，将右边的分为右子数组。将左子数组放入当前节点的左子树。右子树组，放入当前节点的右子树。重复上述步骤即可。</p>
<h2 id="2-解题步骤"><a href="#2-解题步骤" class="headerlink" title="2.解题步骤"></a>2.解题步骤</h2><ol>
<li>创建一个新的节点节点值为数组的中位值 。</li>
<li>判断当前子数组大小是否为 1。</li>
</ol>
<ul>
<li>如果为 1，则直接返回该节点。</li>
<li>反之执行第三步。</li>
</ul>
<ol>
<li>判断当前数组的 <strong>(中间值得索引-1)&gt;=0</strong>， <strong>就是判断当前节点是否存在左子树</strong>。</li>
</ol>
<ul>
<li><pre><code>如果大于0，创建一个新的数组命名为左子数组，值为当前数组的中间值左边的所有数值。然后将将左子数组传入当前函数执行。
</code></pre>
</li>
<li>反之，则表明数组越界。直接执行第四步</li>
</ul>
<ol>
<li>判断当前数组的**(中间值的索引是+1)&lt;=当前数组的长度** ，就是判断当前节点是否存在右子树。</li>
</ol>
<ul>
<li>如果小于的话，创建一个新的数组命名为右子数组，值为当前数组的中间值右边的所有数值。然后将将右子数组传入当前函数执行。</li>
<li>反之，执行第五步</li>
</ul>
<ol>
<li>返回当前节点。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }{</span><br><span class="line">            <span class="keyword">return</span> arrrayToBST(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">arrrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">       <span class="keyword">int</span> length=end-start+<span class="number">1</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[start+length/<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(start==end){</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(length/<span class="number">2</span>-<span class="number">1</span>&gt;=<span class="number">0</span>){</span><br><span class="line"></span><br><span class="line">                root.left=arrrayToBST(nums,start,start+length/<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(length/<span class="number">2</span>+<span class="number">1</span>&lt;=length-<span class="number">1</span>){</span><br><span class="line"></span><br><span class="line">                root.right=arrrayToBST(nums,start+length/<span class="number">2</span>+<span class="number">1</span>,end);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>树的问题一般是通过递归和三种遍历方式来解决。目前我所写的很多树的比较简单的题目都是通过递归和树的三种遍历方式来实现的。</p>
<p><strong>各位大佬们看完后觉得我写得很差的的话，可以在评论去疯狂踩踏我蹂躏我。但是最最为重要的事就是不要白嫖！！！！虽然我知道在看的各位都是白嫖党！！！！</strong></p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode递增顺序查找树</title>
    <url>/2021/01/04/LeetCode%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h1><p><img src="https://img-blog.csdnimg.cn/20210104232857846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=sJMFS&amp;originHeight=560&amp;originWidth=770&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">题目详情链接</a></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>将原树进行中序遍历将树中的节点的非空值放入到一个 list 集合中，创建一棵新树然后通过递归的方式将不断生成的新的右子树直到集合遍历完。</p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1.对原树进行中序遍历。将非空树的值一次放入到List集合中。</span><br><span class="line">2.创建一个函数用于对集合进行遍历，将每次遍历得到的值用来创建当前树的值。</span><br><span class="line">  在集合遍历完之前，继续递归该函数，将传递的实参改为当前树的右子树。</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">increasingBST</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>){</span><br><span class="line">           ArrayList array=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Solution s=<span class="keyword">new</span> Solution();</span><br><span class="line">            s.inOrderTraversal(root,array);</span><br><span class="line">           root=s.toTree(<span class="keyword">null</span>,array,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">	<span class="comment">//通过递归的方式不断将集合中的值有做新的右子树的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">toTree</span><span class="params">(TreeNode root,List&lt;Integer&gt; array,<span class="keyword">int</span> length)</span></span>{</span><br><span class="line">        root=<span class="keyword">new</span> TreeNode(array.get(length));</span><br><span class="line">        root.left=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length&lt;array.size()-<span class="number">1</span>){</span><br><span class="line">            length++;</span><br><span class="line">            root.right=toTree(root.right,array,length);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversal</span><span class="params">(TreeNode root,List&lt;Integer&gt; array)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>){</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">           inOrderTraversal(root.left,array);</span><br><span class="line">           array.add(root.val);</span><br><span class="line">           inOrderTraversal(root.right,array);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我看来树的重点需要掌握的就是树的遍历方式。前序、中序、后序、层序。基本上许多和树有关的题目都会涉及到他的遍历方式。这些方式都可以通过递归的方式来实现。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity中执行表单登录认证时无法执行loadUserByUsername方法</title>
    <url>/2021/05/13/SpringSecurity%E4%B8%AD%E6%89%A7%E8%A1%8C%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8CloadUserByUsername%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>​</p>
<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><p>执行表单登录认证时配置了 loginProcessUrl 和 loginPage。但是执行登录认证时并不执行 UserDetailsService 接口的 loadByUsername 方法。导致认证失败。</p>
<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><h2 id="1-表单登录页面"><a href="#1-表单登录页面" class="headerlink" title="1. 表单登录页面"></a>1. 表单登录页面</h2><p><img src="https://img-blog.csdnimg.cn/20210513173942750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=vD5Kl&amp;originHeight=213&amp;originWidth=806&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2. 配置类"></a>2. 配置类</h2><p><img src="https://img-blog.csdnimg.cn/20210513173201531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=jxOTr&amp;originHeight=285&amp;originWidth=983&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="3-loadUserByUsername-方法"><a href="#3-loadUserByUsername-方法" class="headerlink" title="3. loadUserByUsername 方法"></a>3. loadUserByUsername 方法</h2><p><img src="https://img-blog.csdnimg.cn/20210513173433199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=msIDN&amp;originHeight=219&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h4 id="所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印-loadUserByUsername-方法中的日志。"><a href="#所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印-loadUserByUsername-方法中的日志。" class="headerlink" title="所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印 loadUserByUsername 方法中的日志。"></a>所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印 loadUserByUsername 方法中的日志。</h4><p><img src="https://img-blog.csdnimg.cn/20210513173819188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=CEEDw&amp;originHeight=259&amp;originWidth=902&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><img src="https://img-blog.csdnimg.cn/20210513173839414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=n9Noa&amp;originHeight=227&amp;originWidth=1798&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p>因此判断是 loginProcessUrl 方法的问题。进入 loginProcessUrl 方法内部发现。关键信息<br><img src="https://img-blog.csdnimg.cn/20210513174339209.png#id=h0HbJ&amp;originHeight=117&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br>登录表单申请方式必须为 post 才行，springsecurity 才会进行登录认证。</p>
<hr>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="将登录表单中提交方法更改为-post-方式即可"><a href="#将登录表单中提交方法更改为-post-方式即可" class="headerlink" title="将登录表单中提交方法更改为 post 方式即可"></a>将登录表单中提交方法更改为 post 方式即可</h2></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringSecurity</tag>
        <tag>开发问题</tag>
      </tags>
  </entry>
  <entry>
    <title>标题名</title>
    <url>/2021/12/21/%E6%B5%8B%E8%AF%95%E8%AF%AD%E9%9B%80%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>​</p>
<hr>
<p>title: 标题名<br>comments: true<br>date: 2021/12/21 14:38:04<br>categories: 目录名<br>tags: [标签名 1,2,3]</p>
<hr>
<p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<h2 id="测试部署测试部署测试部署"><a href="#测试部署测试部署测试部署" class="headerlink" title="测试部署测试部署测试部署"></a>测试部署测试部署测试部署</h2><p>title: 标题名<br>comments: true<br>date: 2021/12/21 14:38:04<br>categories: 目录名<br>tags: [标签名 1,2,3]</p>
<hr>
<p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>123123123 测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署</p>
</body></html>]]></content>
      <categories>
        <category>目录名</category>
      </categories>
      <tags>
        <tag>标签名1</tag>
        <tag>2</tag>
        <tag>3</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro官方文档笔记</title>
    <url>/2021/06/26/Shiro%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>​</p>
<h1 id="1-核心架构"><a href="#1-核心架构" class="headerlink" title="1. 核心架构"></a>1. 核心架构</h1><h2 id="1-核心流程"><a href="#1-核心流程" class="headerlink" title="1. 核心流程"></a>1. 核心流程</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/f0ce7abbc21ee54f870ed39a960ba893.png#id=m154o&amp;originHeight=267&amp;originWidth=504&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h3 id="1-Subject"><a href="#1-Subject" class="headerlink" title="1. &nbsp;Subject"></a>1. &nbsp;Subject</h3><p>指需要认证的用户信息实体，subject 需要通过 securityManager 指定 Realm 来查询是否存在改用户信息和给用户进行授权的操作</p>
<h3 id="2-SecurityManager"><a href="#2-SecurityManager" class="headerlink" title="2. SecurityManager"></a>2. SecurityManager</h3><p>shiro 体系的核心。协调内部安全组件。如：Realm 等。</p>
<h3 id="3-Realm"><a href="#3-Realm" class="headerlink" title="3. Realm"></a>3. Realm</h3><p>通过查询特定的数据源：数据库、LDAP 等。来对 Subject 进行认证和授权操作。</p>
<h2 id="2-核心架构"><a href="#2-核心架构" class="headerlink" title="2. 核心架构"></a>2. 核心架构</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-FMppfyoU-1624680171088)(<a href="https://i.loli.net/2021/06/25/tADiGzO3lZpfrYW.png">https://i.loli.net/2021/06/25/tADiGzO3lZpfrYW.png</a>)]</p>
<h3 id="1-Authenticator-认证器"><a href="#1-Authenticator-认证器" class="headerlink" title="1. Authenticator 认证器"></a>1. Authenticator 认证器</h3><p>对 Subject 中的信息进行认证。通过将 Subject 的信息传入 Realm 查询指定数据源来进行认证判断。<br>当用户尝试登录时，执行认证器。</p>
<h3 id="2-AuthenticationStrategy-认证策略器"><a href="#2-AuthenticationStrategy-认证策略器" class="headerlink" title="2. AuthenticationStrategy 认证策略器"></a>2. AuthenticationStrategy 认证策略器</h3><p>如果配置了多个多个 Realm，则通过认证策略器来决定认证成功和认证失败的情况。</p>
<h3 id="3-Authorizer-授权器"><a href="#3-Authorizer-授权器" class="headerlink" title="3. Authorizer 授权器"></a>3. Authorizer 授权器</h3><p>用于对认证成功后的 Subject 进行授权操作。通过 Realm 查询到用户的对应信息给用户授予对应的权力</p>
<h3 id="4-SessionManager-会话管理器"><a href="#4-SessionManager-会话管理器" class="headerlink" title="4. SessionManager 会话管理器"></a>4. SessionManager 会话管理器</h3><p>Shiro 自带的会话管理器。能够创建和管理用户的 Session 生命周期。提供一种可靠的会话体验。默认情况下，Shiro 使用现有的会话机制机制如 Servlet 容器。</p>
<h3 id="5-SessionDao-会话持久器"><a href="#5-SessionDao-会话持久器" class="headerlink" title="5. SessionDao 会话持久器"></a>5. SessionDao 会话持久器</h3><p>将 Session Manager 中的 Session 对象进行 CRUD 操作将其存储起来。</p>
<h3 id="6-CacheManager-缓存管理器"><a href="#6-CacheManager-缓存管理器" class="headerlink" title="6. CacheManager 缓存管理器"></a>6. CacheManager 缓存管理器</h3><p>用于缓存 Shiro 中的 Realm 中的数据</p>
<h3 id="7-Crypto-加密"><a href="#7-Crypto-加密" class="headerlink" title="7. Crypto 加密"></a>7. Crypto 加密</h3><p>Shiro 中一个简单易用的加密包。针对于 Java 的加密机制，Shiro 的加密 Api 更加简单易用。</p>
<h3 id="8-Realm-领域"><a href="#8-Realm-领域" class="headerlink" title="8. Realm 领域"></a>8. Realm 领域</h3><p>用于查询数据数据源的信息。通过将查询到用户信息返回给认证器和授权器。进行认证和授权。</p>
<p>Security Manager 中的默认实现的功能</p>
<ul>
<li>Authentication 认证</li>
<li>Authorization 授权</li>
<li>Session Management &nbsp; 会话管理</li>
<li>Cache Management 缓存管理</li>
<li><a href="https://shiro.apache.org/realm.html">Realm</a> coordination &nbsp; 领域协调</li>
<li>Event propagation 事件传播</li>
<li>“Remember Me” Services &nbsp; 记住我服务</li>
<li>Subject creation Subject 对象的创建</li>
<li>Logout &nbsp; 注销</li>
</ul>
<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="2-身份认证"><a href="#2-身份认证" class="headerlink" title="2. 身份认证"></a>2. 身份认证</h1><p>Subject 的构成</p>
<ol>
<li>principals</li>
</ol>
<p>通俗点来说就是用户的用户名，可以用来表示用户身份的证明。当然并不是唯一的。</p>
<ol start="2">
<li>credentials</li>
</ol>
<p>可以用来证明该用户身份的证据。通常指的是密码或证书等。</p>
<h2 id="1-认证-Subjects"><a href="#1-认证-Subjects" class="headerlink" title="1. 认证 Subjects"></a>1. 认证 Subjects</h2><ol>
<li>获取 Subject 中的 principals 和 Credentials</li>
<li>提交 principals 和 credentials 来进行认证操作</li>
<li>认证成功，则允许访问。反之阻止访问和进行新的认证</li>
</ol>
<p>实例演示：</p>
<ol>
<li><strong>获取 principals 和 credentials</strong></li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">//Example using most common scenario of username/password pair:</span><br><span class="line">UsernamePasswordToken token = new UsernamePasswordToken(username, password);</span><br><span class="line">//"Remember Me" built-in: token.setRememberMe(true);</span><br></pre></td></tr></tbody></table></figure>

<p>UsernamePasswordToken 是用来进行 Shiro 进行认证的接口对象。Shiro 中的认证需要认证的信息都要封装成 AuthenticationToken 接口的对象。UsernamePassowrdToken 是其接口的实现。<br>**</p>
<ol start="2">
<li>** 提交 priincipals 和 credentials**</li>
</ol>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject(); currentUser.login(token);</span><br></pre></td></tr></tbody></table></figure>

<p>** **subject 对象通过 login 方法将认证信息进行认证提交</p>
<ol start="3">
<li><strong>认证成功或失败</strong></li>
</ol>
<p>**<br>当认证成功后即可成功访问，如果失败 Shiro 会抛出异常。通过异常可以知道认证失败的原因。</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">try { currentUser.login(token); } catch ( UnknownAccountException uae ) { ... }</span><br><span class="line">catch ( IncorrectCredentialsException ice ) { ... } catch (</span><br><span class="line">LockedAccountException lae ) { ... } catch ( ExcessiveAttemptsException eae ) {</span><br><span class="line">... } ... catch your own ... } catch ( AuthenticationException ae ) {</span><br><span class="line">//unexpected error? } //No problems, continue on as expected...</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-Remember-Me-和-Authenticated"><a href="#2-Remember-Me-和-Authenticated" class="headerlink" title="2. Remember Me 和 Authenticated"></a>2. Remember Me 和 Authenticated</h2><ol>
<li><strong>Remember me</strong></li>
</ol>
<ul>
<li>使用的是先前会话的 Subject</li>
<li>并且 Subject 是非匿名的</li>
<li>通过调用 isRemembered 方法返回的 true</li>
</ul>
<ol start="2">
<li><strong>Authenticated</strong></li>
</ol>
<ul>
<li>当前认证成功的 subject</li>
<li>调用 isAuthenticated 返回 true</li>
</ul>
<p><strong>记住和已认证两种状态不能同时发生在同一 subject 上。</strong></p>
<h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>以下是一个相当常见的场景，有助于说明为什么记住和已认证之间的区别很重要。<br>假设您使用的是<a href="https://www.amazon.com/">Amazon.com</a>。您已成功登录，并已在购物车中添加了几本书。但是您必须参加会议，但忘记注销。会议结束时，该回家了，您离开办公室了。<br>第二天上班时，您发现自己还没有完成购买，因此回到 amazon.com。这次，亚马逊“记住”您的身份，以名字向您打招呼，并仍然为您提供一些个性化的书本推荐。对于亚马逊，<code>subject.isRemembered()</code>将返回<code>true</code>。<br>但是，如果您尝试访问帐户以更新信用卡信息以购买图书，会发生什么情况？当亚马逊“记住”您(<code>isRemembered()</code> == <code>true</code>)时，它不能保证您实际上就是您(例如，某个同事正在使用您的计算机)。<br>因此，在您执行敏感操作(如更新信用卡信息)之前，亚马逊会强迫您登录，以便他们保证您的身份。登录后，您的身份已通过验证，并且到亚马逊的<code>isAuthenticated()</code>现在为<code>true</code>。<br>这种情况在许多类型的应用程序中经常发生，因此该功能是 Shiro 内置的，因此您可以将其用于自己的应用程序。现在，是否使用<code>isRemembered()</code>或<code>isAuthenticated()</code>来定制视图和工作流已由您决定，但是 Shiro 将保留此基本状态，以备不时之需。</p>
<h2 id="3-注销"><a href="#3-注销" class="headerlink" title="3. 注销"></a>3. 注销</h2><p>当 Subject 调用 logout 方法后任何现有的 Session 都将失效并且任何身份都会被取消关联。</p>
<h2 id="4-认证流程"><a href="#4-认证流程" class="headerlink" title="4. 认证流程"></a>4. 认证流程</h2><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-WFk3b6E6-1624680171090)(<a href="https://i.loli.net/2021/06/25/qGAUkvJCdIhjpFw.png">https://i.loli.net/2021/06/25/qGAUkvJCdIhjpFw.png</a>)]</p>
<p><strong>step1：</strong><br>调用 login 方法提交认证信息</p>
<p><strong>step2：</strong><br>调用 security Mangager.login（token）来通过 securityManager 开始真正的身份认证</p>
<p><strong>step3:</strong><br>securityManager 接收 token 并调用 authenticator.authenticate(token)将认证信息提供给认证器进行认证。<br><strong>step4：</strong></p>
<p>shiro 默认使用的 MoularRealmAuthenticator 实例通过 Realm 进行认证。如果配置了多个 Realm 则使用认证策略其，来进行多次的 Realm 认证。来决定认证成功和失败的条件。<br><strong>只有一个 Realm 的话不需要认证策略器</strong><br>**<br><strong>step5:</strong><br>咨询已配置的 Realm，通过使用 supports 方法判断其是否支持验证其身份信息，如果返回 true。则调用 Realm 的 getAuthenticationInfo 方法获取认证信息。</p>
<p>**<br>**</p>
<h1 id="3-授权"><a href="#3-授权" class="headerlink" title="3. 授权"></a>3. 授权</h1><h2 id="1-授权要素"><a href="#1-授权要素" class="headerlink" title="1. 授权要素"></a>1. 授权要素</h2><ul>
<li>权限：在程序中，表示用户可以执行什么动作或行为</li>
<li>角色：是一个或多个权限的集合实体。</li>
<li>用户：是一个或多个角色的集合实体。</li>
</ul>
<h2 id="2-授权-Subjects"><a href="#2-授权-Subjects" class="headerlink" title="2.授权 Subjects"></a>2.授权 Subjects</h2><h3 id="1-编程授权"><a href="#1-编程授权" class="headerlink" title="1. 编程授权"></a>1. 编程授权</h3><h4 id="1-基于角色的授权"><a href="#1-基于角色的授权" class="headerlink" title="1. 基于角色的授权"></a>1. 基于角色的授权</h4><p>通过用户是否含有特定角色，来执行角色检查</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject(); if</span><br><span class="line">(currentUser.hasRole("administrator")) { //show the admin button } else {</span><br><span class="line">//don't show the button? Grey it out? } Subject currentUser =</span><br><span class="line">SecurityUtils.getSubject(); //guarantee that the current user is a bank teller</span><br><span class="line">and //therefore allowed to open the account:</span><br><span class="line">currentUser.checkRole("bankTeller"); openBankAccount();</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/c3804a3a99297afbbe4a0b3a0a22edf6.png#id=coNW4&amp;originHeight=342&amp;originWidth=1008&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/0fddec08dec8177dfa97498c8f147800.png#id=rHpDE&amp;originHeight=325&amp;originWidth=1024&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h4 id="2-基于权限的授权"><a href="#2-基于权限的授权" class="headerlink" title="2. 基于权限的授权"></a>2. 基于权限的授权</h4><p>与基于角色类似<img src="https://img-blog.csdnimg.cn/img_convert/045518ca2b12eaf21f9b4aa2faf2611a.png#id=z00tC&amp;originHeight=371&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/6f2894b3d16202e20863f31d4b10a6ff.png#id=rO1PU&amp;originHeight=335&amp;originWidth=951&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-dUuiGDuP-1624680171097)(<a href="https://i.loli.net/2021/06/25/ZKQJUnhEvT6a5ky.png">https://i.loli.net/2021/06/25/ZKQJUnhEvT6a5ky.png</a>)]</p>
<h3 id="2-基于注解授权"><a href="#2-基于注解授权" class="headerlink" title="2. 基于注解授权"></a>2. 基于注解授权</h3><p><strong>前提：</strong><br>需要在程序中开启 Aop 支持</p>
<h4 id="1-RequiresAuthentication-注解"><a href="#1-RequiresAuthentication-注解" class="headerlink" title="1. RequiresAuthentication 注解"></a>1. RequiresAuthentication 注解</h4><p>调用该方法时要求用户在当前会话期间认证过</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">@RequiresAuthentication public void updateAccount(Account userAccount) { //this</span><br><span class="line">method will only be invoked by a //Subject that is guaranteed authenticated ...</span><br><span class="line">} //等价于 public void updateAccount(Account userAccount) { if</span><br><span class="line">(!SecurityUtils.getSubject().isAuthenticated()) { throw new</span><br><span class="line">AuthorizationException(...); } //Subject is guaranteed authenticated here ... }</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-RequiresGuest-注解"><a href="#2-RequiresGuest-注解" class="headerlink" title="2. RequiresGuest 注解"></a>2. RequiresGuest 注解</h4><p>不需要身份认证即可访问的方法</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">@RequiresGuest public void signUp(User newUser) { //this method will only be</span><br><span class="line">invoked by a //Subject that is unknown/anonymous ... } //等价于 public void</span><br><span class="line">signUp(User newUser) { Subject currentUser = SecurityUtils.getSubject();</span><br><span class="line">PrincipalCollection principals = currentUser.getPrincipals(); if (principals !=</span><br><span class="line">null &amp;&amp; !principals.isEmpty()) { //known identity - not a guest: throw new</span><br><span class="line">AuthorizationException(...); } //Subject is guaranteed to be a 'guest' here ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-RequiresPermissions-注解"><a href="#3-RequiresPermissions-注解" class="headerlink" title="3. RequiresPermissions 注解"></a>3. RequiresPermissions 注解</h4><p>要求用户必须有该权限才能调用</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">@RequiresPermissions("account:create") public void createAccount(Account</span><br><span class="line">account) { //this method will only be invoked by a Subject //that is permitted</span><br><span class="line">to create an account ... } public void createAccount(Account account) { Subject</span><br><span class="line">currentUser = SecurityUtils.getSubject(); if</span><br><span class="line">(!subject.isPermitted("account:create")) { throw new</span><br><span class="line">AuthorizationException(...); } //Subject is guaranteed to be permitted here ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h4 id="4-RequiresRoles-注解"><a href="#4-RequiresRoles-注解" class="headerlink" title="4. RequiresRoles 注解"></a>4. RequiresRoles 注解</h4><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">@RequiresRoles("administrator") public void deleteUser(User user) { //this</span><br><span class="line">method will only be invoked by an administrator ... } public void</span><br><span class="line">deleteUser(User user) { Subject currentUser = SecurityUtils.getSubject(); if</span><br><span class="line">(!subject.hasRole("administrator")) { throw new AuthorizationException(...); }</span><br><span class="line">//Subject is guaranteed to be an 'administrator' here ... }</span><br></pre></td></tr></tbody></table></figure>

<h4 id="5-RequiresUser-注解"><a href="#5-RequiresUser-注解" class="headerlink" title="5. RequiresUser 注解"></a>5. RequiresUser 注解</h4><p>要求用户在当前会话期间进行了会话认证或者是是哦那个 Remember Me 服务被记住</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">@RequiresUser public void updateAccount(Account account) { //this method will</span><br><span class="line">only be invoked by a 'user' //i.e. a Subject with a known identity ... } public</span><br><span class="line">void updateAccount(Account account) { Subject currentUser =</span><br><span class="line">SecurityUtils.getSubject(); PrincipalCollection principals =</span><br><span class="line">currentUser.getPrincipals(); if (principals == null || principals.isEmpty()) {</span><br><span class="line">//no identity - they're anonymous, not allowed: throw new</span><br><span class="line">AuthorizationException(...); } //Subject is guaranteed to have a known identity</span><br><span class="line">here ... }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-基于-jsp-标签授权"><a href="#3-基于-jsp-标签授权" class="headerlink" title="3. 基于 jsp 标签授权"></a>3. 基于 jsp 标签授权</h3><h3 id="对应目录-jsp-标签库"><a href="#对应目录-jsp-标签库" class="headerlink" title="对应目录 jsp 标签库"></a>对应目录 jsp 标签库</h3><h2 id="3-授权流程"><a href="#3-授权流程" class="headerlink" title="3. 授权流程"></a>3. 授权流程</h2><p><img src="https://img-blog.csdnimg.cn/img_convert/8b954ab61a6a1614a4029bbf0e7b17ea.png#id=WV4Hc&amp;originHeight=435&amp;originWidth=742&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<p><strong>step1:</strong><br>subject 通过调用一些角色和权限的判断方法</p>
<p><strong>step2:</strong><br>securityManager 调用上面相同的角色和权限的方法</p>
<p><strong>step3:</strong><br>securityManager 调用 authorizer 默认实例 ModularRealmAuthorizer 实列</p>
<p><strong>step4:</strong><br>使用 Realm 获取用户对应的权限信息</p>
<h1 id="4-领域"><a href="#4-领域" class="headerlink" title="4. 领域"></a>4. 领域</h1><h2 id="1-领域认证"><a href="#1-领域认证" class="headerlink" title="1.领域认证"></a>1.领域认证</h2><h3 id="1-领域认证流程"><a href="#1-领域认证流程" class="headerlink" title="1. 领域认证流程"></a>1. 领域认证流程</h3><p>如果调用 Realm 方法支持提交的 AuthenticationToken，则调用 Realm 的 getAuthenticationInfo 方法。然后通过该方法可以获取对应 token 在领域数据源的数据。方法执行顺序为</p>
<ol>
<li>识别 token 中的 principal 信息</li>
<li>根据 principal 查找对应数据源中对应的数据</li>
<li>确保 token 中的 credentials 与对应数据库中的数据匹配</li>
<li>匹配返回 AuthenticationInfo 实例，反之则抛出 AuthenticationException</li>
</ol>
<p><strong>领域认证可以通过实现 AuthorizingRealm 抽象类来实现领域认证。</strong></p>
<h3 id="2-凭证匹配"><a href="#2-凭证匹配" class="headerlink" title="2. 凭证匹配"></a>2. 凭证匹配</h3><p>在领域认证流程中领域必须验证 Subject 提交的 credentials 和数据库中存储的凭据是否匹配。如果匹配在身份验证成功。<br>凭证匹配通过 AuthenticatingRealm 和子类 CredentialsMatcher 来实现凭据的比较</p>
<p>Shiro 提供了 CredentialsMatcher 的实现。例如 SimpleCredentialsMatcher 和 HashedCredentialsMatcher 的实现类。也可以自己自定义证书匹配的规则。</p>
<h4 id="1-SimpleCredentialsMatcher"><a href="#1-SimpleCredentialsMatcher" class="headerlink" title="1. SimpleCredentialsMatcher"></a>1. SimpleCredentialsMatcher</h4><p>Shiro 中所有的 Realm 默认使用的都是 SimpleCredentialsMatcher。SimpleCredentialsMatcher 对存储的凭据和 AuthenticationToken 中进行直接相等性检查。</p>
<h4 id="2-HashedCredentialsMatcher"><a href="#2-HashedCredentialsMatcher" class="headerlink" title="2. HashedCredentialsMatcher"></a>2. HashedCredentialsMatcher</h4><p>当用户需要存储一些比较密码等一些重要的凭证时，不是直接存入数据库中而是先 hash 一次然后再存入数据库中。<br>这样用户存储的凭证更加安全也没有人知道原始值。</p>
<h2 id="2-领域授权"><a href="#2-领域授权" class="headerlink" title="2. 领域授权"></a>2. 领域授权</h2><p>SeurityManager 将权限和角色的检查任务交给授权器。默认的授权器为 ModularRealmAuthorizer。</p>
<h3 id="1-基于角色的授权流程"><a href="#1-基于角色的授权流程" class="headerlink" title="1. 基于角色的授权流程"></a>1. 基于角色的授权流程</h3><ol>
<li>Subject 委托 SecurityManager 以确定是否分配给定的角色</li>
<li>SecurityManager 委托授权器</li>
<li>授权器逐个使用所有领域，直到找到 Subject 指定角色。如果都没有则返回 false</li>
<li>如果在领域中成功找到则掉哦那个 AuthenticationInfo.getRoles 返回给定角色。并授予访问权限。</li>
</ol>
<h4 id="2-基于权限的授权流程"><a href="#2-基于权限的授权流程" class="headerlink" title="2. 基于权限的授权流程"></a>2. 基于权限的授权流程</h4><ol>
<li>Subject 委托 SecurityManager 授予或拒绝授予权限</li>
<li>SecurityManager 委托给授权器</li>
<li>授权器查找所有领域，如果查找到对应全新啊，则授予权限。反之则拒绝授予权限</li>
</ol>
<h1 id="5-会话管理"><a href="#5-会话管理" class="headerlink" title="5. 会话管理"></a>5. 会话管理</h1><p><strong>特性：</strong></p>
<ol>
<li>轻松自定义会话存储</li>
<li>支持 web</li>
<li>可用于 sso</li>
</ol>
<h2 id="1-使用-Session"><a href="#1-使用-Session" class="headerlink" title="1. 使用 Session"></a>1. 使用 Session</h2><p>Session 的获取</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Subject currentUser = SecurityUtils.getSubject(); Session session =</span><br><span class="line">currentUser.getSession(); session.setAttribute( "someKey", someValue);</span><br></pre></td></tr></tbody></table></figure>

<p><img src="https://img-blog.csdnimg.cn/img_convert/10fc819bbfd3c78fdeb94ea7f5007ba9.png#id=YfoSQ&amp;originHeight=220&amp;originWidth=1030&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="2-会话管理器"><a href="#2-会话管理器" class="headerlink" title="2. 会话管理器"></a>2. 会话管理器</h2><p>Shiro 中会话管理器可以对应用中的 Session 进行创建、删除、验证等操作。<br>Shiro 中提供了默认的会话管理器 DefaultSessionManager。提供了 Session 的验证和清楚等</p>
<h2 id="3-会话存储"><a href="#3-会话存储" class="headerlink" title="3. 会话存储"></a>3. 会话存储</h2><p>当每次创建、更新或删除长时间未使用的 Session 时，未来避免 Session 存储空间耗尽。SessionManager 将 Session 的创建、读取、更新、删除操作委派给<br>组件 SesssionDao。<br>SessionDao 的特点将所有你只需要实现这个接口姐可以实现任何数据的储存在任何地方。这意味着你可以将 Session 数据存储在内存中、关系数据库、NoSql 数据库中。</p>
<p>Shiro 中默认的 Session 存储在内存中。可以通过配置 EHCacheSessionDao 或者是实现自定以的 SessionDao。</p>
<h3 id="1-EHCache-SessionDao"><a href="#1-EHCache-SessionDao" class="headerlink" title="1. EHCache SessionDao"></a>1. EHCache SessionDao</h3><p>默认情况下未开启。如需开启需要在会话管理器中开启 EHCache 支持。EHCache SessionDao 会将 Sesssion 存储在会话中。如果内存不够了，则会其他的 Session 存储在磁盘中。<br>除了存储 Session 外，还以缓存身份验证和授权数据</p>
<h3 id="2-EHCacheSessionDao-配置"><a href="#2-EHCacheSessionDao-配置" class="headerlink" title="2.EHCacheSessionDao 配置"></a>2.EHCacheSessionDao 配置</h3><p>默认情况下 Shiro 中的 EhCacheManager 使用的 Shiro 自带的 ehcache.xml 来设置缓存配置。</p>
<h1 id="6-JSP-标签库"><a href="#6-JSP-标签库" class="headerlink" title="6. JSP 标签库"></a>6. JSP 标签库</h1><h2 id="1-标签库配置"><a href="#1-标签库配置" class="headerlink" title="1. 标签库配置"></a>1. 标签库配置</h2><figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix="shiro" uri="http://shiro.apache.org/tags" %&gt;</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-访客标签"><a href="#2-访客标签" class="headerlink" title="2. 访客标签"></a>2. 访客标签</h2><p>不需要认证就可以生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:guest</span>&gt;</span></span><br><span class="line">  Hi there! Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.jsp"</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> or</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"signup.jsp"</span>&gt;</span>Signup<span class="tag">&lt;/<span class="name">a</span>&gt;</span> today!</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:guest</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-用户标签"><a href="#3-用户标签" class="headerlink" title="3. 用户标签"></a>3. 用户标签</h2><p>当用户被认证过或者说是被记住了的话才生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:user</span>&gt;</span></span><br><span class="line">    Welcome back John!  Not John? Click <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.jsp"</span>&gt;</span>here<span class="tag">&lt;<span class="name">a</span>&gt;</span> to login.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:user</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-认证标签"><a href="#3-认证标签" class="headerlink" title="3. 认证标签"></a>3. 认证标签</h2><p>用户只有被认证过才生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:authenticated</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"updateAccount.jsp"</span>&gt;</span>Update your contact information<span class="tag">&lt;/<span class="name">a</span>&gt;</span>.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:authenticated</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-认证失败标签"><a href="#4-认证失败标签" class="headerlink" title="4. 认证失败标签"></a>4. 认证失败标签</h2><p>用户认证失败的生效标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br><span class="line">  Please <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"login.jsp"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">a</span>&gt;</span> in order to update your credit card</span><br><span class="line">  information.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:notAuthenticated</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-principal-标签"><a href="#5-principal-标签" class="headerlink" title="5.principal 标签"></a>5.principal 标签</h2><p>获取用户的 priincipal 属性<br>shiro:principa 标签可以简化为 principal</p>
<p>principal 等价于 subject.getPrincipal()方法</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line">Hello, <span class="tag">&lt;<span class="name">shiro:principal</span> /&gt;</span>, how are you today? //等价于 Hello, &lt;%=</span><br><span class="line">SecurityUtils.getSubject().getPrincipal().toString() %&gt;, how are you today? User</span><br><span class="line">ID: <span class="tag">&lt;<span class="name">principal</span> <span class="attr">type</span>=<span class="string">"java.lang.Integer"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">User ID: &lt;%=</span><br><span class="line">SecurityUtils.getSubject().getPrincipals().oneByType(Integer.class).toString()</span><br><span class="line">%&gt; Hello, <span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">property</span>=<span class="string">"firstName"</span> /&gt;</span>, how are you today? Hello,</span><br><span class="line"><span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">type</span>=<span class="string">"com.foo.User"</span> <span class="attr">property</span>=<span class="string">"firstName"</span> /&gt;</span>, how are you today?</span><br><span class="line">Hello, &lt;%= SecurityUtils.getSubject().getPrincipal().getFirstName().toString()</span><br><span class="line">%&gt;, how are you today?</span><br></pre></td></tr></tbody></table></figure>

<h2 id="6-hasRole-标签"><a href="#6-hasRole-标签" class="headerlink" title="6. hasRole 标签"></a>6. hasRole 标签</h2><p>当用户拥有某个权限才会生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasRole</span> <span class="attr">name</span>=<span class="string">"administrator"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"admin.jsp"</span>&gt;</span>Administer the system<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasRole</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-misssingRole-标签"><a href="#7-misssingRole-标签" class="headerlink" title="7.misssingRole 标签"></a>7.misssingRole 标签</h2><p>与 hasRole 标签作用相反</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:lacksRole</span> <span class="attr">name</span>=<span class="string">"administrator"</span>&gt;</span></span><br><span class="line">  Sorry, you are not allowed to administer the system.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:lacksRole</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="8-hasAnyRole-标签"><a href="#8-hasAnyRole-标签" class="headerlink" title="8.hasAnyRole 标签"></a>8.hasAnyRole 标签</h2><p>用户只要含有任意一个角色就生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasAnyRoles</span> <span class="attr">name</span>=<span class="string">"developer, project manager, administrator"</span>&gt;</span></span><br><span class="line">  You are either a developer, project manager, or administrator.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasAnyRoles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="9-hasPermission-标签"><a href="#9-hasPermission-标签" class="headerlink" title="9.hasPermission 标签"></a>9.hasPermission 标签</h2><p>用户拥有某项权限才生效的标签</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:hasPermission</span> <span class="attr">name</span>=<span class="string">"user:create"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"createUser.jsp"</span>&gt;</span>Create a new User<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:hasPermission</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="10-missingsPermisssion-标签"><a href="#10-missingsPermisssion-标签" class="headerlink" title="10. missingsPermisssion 标签"></a>10. missingsPermisssion 标签</h2><p>与 hasPermission 作用相反</p>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">shiro:lacksPermission</span> <span class="attr">name</span>=<span class="string">"user:delete"</span>&gt;</span></span><br><span class="line">  Sorry, you are not allowed to delete user accounts.</span><br><span class="line"><span class="tag">&lt;/<span class="name">shiro:lacksPermission</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC</title>
    <url>/2021/12/18/JUC/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<h1 id="1-并发基础"><a href="#1-并发基础" class="headerlink" title="1. 并发基础"></a>1. 并发基础</h1><h2 id="1-多线程实现"><a href="#1-多线程实现" class="headerlink" title="1. 多线程实现"></a>1. 多线程实现</h2><h3 id="1-实现方法分类"><a href="#1-实现方法分类" class="headerlink" title="1. 实现方法分类"></a>1. 实现方法分类</h3><ol>
<li>继承 Thread 类，重写 run 方法</li>
<li>实现 Runnable 接口，实现 run 方法</li>
</ol>
<p>​</p>
<h3 id="2-两种方法对比"><a href="#2-两种方法对比" class="headerlink" title="2.两种方法对比"></a>2.两种方法对比</h3><ul>
<li>实现 runnable 接口更好</li>
</ul>
<ol>
<li> Java 只支持单继承，继承 Thread 类导致程序拓展性不好</li>
<li> 解耦，将创建线程和线程任务调度分离了</li>
</ol>
<ul>
<li>两种方法本质区别对比</li>
</ul>
<ol>
<li>继承 Thread 类是通过重写 Thread 类的方法</li>
<li>实现 Runnable 是在 Thread 类中调用 Runnable 实现类的 run 方法</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632972177969-fad65c06-bcc6-44e4-b2b1-6ca907ef17f6.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=88&amp;id=u87fc8e3c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=175&amp;originWidth=798&amp;originalType=binary&amp;ratio=1&amp;size=17698&amp;status=done&amp;style=none&amp;taskId=ue1385ff3-9acf-4f86-9c7b-9dc189b4937&amp;width=399" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632975139265-558c5dc8-a5c9-4d7e-a3a2-f7776812b1d3.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=179&amp;id=uf1f15e3b&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=358&amp;originWidth=911&amp;originalType=binary&amp;ratio=1&amp;size=208968&amp;status=done&amp;style=none&amp;taskId=u470653a7-2d58-4d6c-8e55-e0f0f3b1a54&amp;width=455.5" alt="image.png"></p>
<p><strong>思考题：同时使用两种方法实现多线程</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BothRunnableThread</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">            <span class="comment">//实现Runnable接口的方法</span></span><br><span class="line">            System.out.println(<span class="string">"我来自Runnable"</span>);</span><br><span class="line">        }) {</span><br><span class="line">            <span class="comment">//重写Thread类的run方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"我来自Thread"</span>);</span><br><span class="line">            }</span><br><span class="line">        }.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>结果<br>​</p>
<p>我来自 Thread<br>​</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p><strong>实现线程创建的方法:只有一种通过 Thread 类来创建线程</strong><br><strong>实现线程执行方法：</strong></p>
<ol>
<li><strong>实现 Runnable 接口的 run 方法，并把接口实例传给 Thread 类在其 Thread 类中的 run 方法中调用</strong></li>
<li><strong>重写 Thread 类的 run 方法</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632972177969-fad65c06-bcc6-44e4-b2b1-6ca907ef17f6.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=88&amp;id=E0Gbe&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=175&amp;originWidth=798&amp;originalType=binary&amp;ratio=1&amp;size=17698&amp;status=done&amp;style=none&amp;taskId=ue1385ff3-9acf-4f86-9c7b-9dc189b4937&amp;width=399" alt="image.png"><br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="错误观点"><a href="#错误观点" class="headerlink" title="错误观点"></a>错误观点</h3><ol>
<li>线程池也是创建线程的一种方式（其本质还是通过 Thread 类来创建线程）</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632973964491-96ae041b-cac4-4e5c-9c8f-5a06fcf1da7f.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=152&amp;id=u79391c98&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=304&amp;originWidth=951&amp;originalType=binary&amp;ratio=1&amp;size=42157&amp;status=done&amp;style=none&amp;taskId=u93535749-5529-4f24-9947-c8d937f09d8&amp;width=475.5" alt="image.png"></p>
<ol start="2">
<li>Callable 也是创建线程的一种方式（本质是调用其创建一个内部线程执行 run 方法在 run 方法内部调用 callable 的 call 方法）</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632976285825-263a51fb-e842-4cec-8206-67a41403c8ac.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=312&amp;id=u645da87e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=624&amp;originWidth=917&amp;originalType=binary&amp;ratio=1&amp;size=58810&amp;status=done&amp;style=none&amp;taskId=ufa52c3d1-c751-48ce-a2ed-806eaadbca4&amp;width=458.5" alt="image.png"><a href="https://blog.csdn.net/xzongyuan/article/details/71378769">FutureTask 与 Callable 的本质</a><br>​</p>
<p>​</p>
<h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><h4 id="1-多少种线程实现方法"><a href="#1-多少种线程实现方法" class="headerlink" title="1. 多少种线程实现方法"></a>1. 多少种线程实现方法</h4><p>参考总结</p>
<h4 id="2-Runnable-和-Thread-类那种方法实现多线程更好"><a href="#2-Runnable-和-Thread-类那种方法实现多线程更好" class="headerlink" title="2. Runnable 和 Thread 类那种方法实现多线程更好"></a>2. Runnable 和 Thread 类那种方法实现多线程更好</h4><p>Runnable 好</p>
<ol>
<li>职责分离： Runnable 定义了执行内容，Thread 类用于创建线程权责分明</li>
<li>提高性能：每次执行一次任务，都需要新建一个独立的线程，如果还想执行这个任务，就必须再新建一个继承了 Thread 类的类，整个线程从开始创建到执行完毕被销毁，这一系列的操作比 run() 方法打印文字本身带来的开销要大得多，相当于捡了芝麻丢了西瓜，得不偿失。如果我们使用实现 Runnable 接口的方式，就可以把任务直接传入线程池，使用一些固定的线程来完成任务，不需要每次新建销毁线程，大大降低了性能开销。</li>
<li>Java 只支持单继承</li>
</ol>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="2-线程的启动"><a href="#2-线程的启动" class="headerlink" title="2. 线程的启动"></a>2. 线程的启动</h2><h3 id="1-start-和-run-方法比较"><a href="#1-start-和-run-方法比较" class="headerlink" title="1. start 和 run 方法比较"></a>1. start 和 run 方法比较</h3><h4 id="1-start-方法"><a href="#1-start-方法" class="headerlink" title="1. start 方法"></a>1. start 方法</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol>
<li> 启动新线程</li>
<li> 新线程的准备工作</li>
</ol>
<h5 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h5><p><strong>执行流程</strong></p>
<ol>
<li><strong>判断线程状态</strong></li>
<li><strong>将线程加入线程组</strong></li>
<li><strong>调用 start0 方法</strong></li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class="line"><span class="comment">    * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * The result is that two threads are running concurrently: the</span></span><br><span class="line"><span class="comment">    * current thread (which returns from the call to the</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * It is never legal to start a thread more than once.</span></span><br><span class="line"><span class="comment">    * In particular, a thread may not be restarted once it has completed</span></span><br><span class="line"><span class="comment">    * execution.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class="line"><span class="comment">    *               started.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>        #run()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>        #stop()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * This method is not invoked for the main method thread or "system"</span></span><br><span class="line"><span class="comment">        * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">        * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * A zero status value corresponds to state "NEW".</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">        * so that it can be added to the group's list of threads</span></span><br><span class="line"><span class="comment">        * and the group's unstarted count can be decremented. */</span></span><br><span class="line">       group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           start0();</span><br><span class="line">           started = <span class="keyword">true</span>;</span><br><span class="line">       } <span class="keyword">finally</span> {</span><br><span class="line">           <span class="keyword">try</span> {</span><br><span class="line">               <span class="keyword">if</span> (!started) {</span><br><span class="line">                   group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">               }</span><br><span class="line">           } <span class="keyword">catch</span> (Throwable ignore) {</span><br><span class="line">               <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                 it will be passed up the call stack */</span></span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></tbody></table></figure>

<h4 id="2-run-方法"><a href="#2-run-方法" class="headerlink" title="2. run 方法"></a>2. run 方法</h4><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><ol>
<li>执行该线程任务</li>
</ol>
<p>​</p>
<p>​</p>
<h5 id="源码解读-1"><a href="#源码解读-1" class="headerlink" title="源码解读"></a>源码解读</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment">  * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment">  * &lt;code&gt;Runnable&lt;/code&gt; object's &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment">  * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">     <span class="keyword">if</span> (target != <span class="keyword">null</span>) {</span><br><span class="line">         target.run();</span><br><span class="line">     }</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h4 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3. 面试题"></a>3. 面试题</h4><p>​</p>
<ol>
<li>两次调用 start 方法会出现什么情况？</li>
</ol>
<p>参考 start 方法源码解读</p>
<ol start="2">
<li>为什么不能直接调用 run 方法</li>
</ol>
<p>start 方法用于创建新的线程，如果直接调用 run 方法则是有 main 线程调用 run 方法<br>​</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartAndRunMethod</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Runnable runnable = () -&gt; {</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        };</span><br><span class="line">        runnable.run();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">main</span><br><span class="line">Thread-<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="3-停止线程"><a href="#3-停止线程" class="headerlink" title="3. 停止线程"></a>3. 停止线程</h2><p><strong>interupt 停止线程原理：通知线程停止，但是不强制停止线程。由线程的 run 方法决定是否停止。</strong></p>
<h3 id="1-正确停止线程"><a href="#1-正确停止线程" class="headerlink" title="1. 正确停止线程"></a>1. 正确停止线程</h3><p>方法 1</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightWayStopThreadInProd</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) {</span><br><span class="line">                System.out.println(<span class="string">"线程中断程序结束"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"go"</span>);</span><br><span class="line">            throwInMethod();</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwInMethod</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">//sleep()、wait()等会抛中断异常的方法在抛出异常之前会清除线程的中断标识</span></span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RightWayStopThreadInProd());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>方法 2</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightWayStopThreadInProd2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            System.out.println(<span class="string">"go"</span>);</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                throwInMethod();</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwInMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RightWayStopThreadInProd2());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-错误的停止方法"><a href="#2-错误的停止方法" class="headerlink" title="2. 错误的停止方法"></a>2. 错误的停止方法</h3><ol>
<li>调用 stop 方法</li>
<li>用 volatile 设置 boolean 标记位</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrongWayVolatile</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        BlockingQueue blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">30</span>);</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(blockingQueue);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(producer);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(blockingQueue);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (!consumer.needMoreNums()) {</span><br><span class="line"></span><br><span class="line">                producer.canceled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            Object take = blockingQueue.take();</span><br><span class="line">            System.out.println(<span class="string">"消费者开始消费"</span> + take);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> canceled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue blockingQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue blockingQueue)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (num &lt;= <span class="number">10000</span> &amp;&amp; !canceled) {<span class="comment">//线程中断的地方</span></span><br><span class="line">                <span class="keyword">if</span> (num % <span class="number">100</span> == <span class="number">0</span>) {</span><br><span class="line"></span><br><span class="line">                    blockingQueue.put(num);<span class="comment">//导致线程不能中断的地方是由于put一直处于阻塞状态</span></span><br><span class="line">                    System.out.println(<span class="string">"生产者生产完成"</span> + num);</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                }</span><br><span class="line">                num++;</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"生产结束"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 概率约为95%的随机消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needMoreNums</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">double</span> random = Math.random();</span><br><span class="line">        <span class="keyword">if</span> (random &gt; <span class="number">0.96</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue blockingQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue blockingQueue)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="4-线程的生命周期"><a href="#4-线程的生命周期" class="headerlink" title="4. 线程的生命周期"></a>4. 线程的生命周期</h2><h3 id="1-线程的-6-种状态"><a href="#1-线程的-6-种状态" class="headerlink" title="1. 线程的 6 种状态"></a>1. 线程的 6 种状态</h3><ul>
<li>New 创建了线程但是没有执行 start 方法</li>
<li>Runnable 调用了 start 方法后变成 Runnable 状态</li>
<li>Blocked 线程进入<strong>Synchronized 修饰的方法或者代码块</strong>但是锁被其他线程拿走</li>
<li>Waiting wait() 、Thread.join() 、LockSupport.park() 只能等待唤醒信号唤醒</li>
<li>Timed Waiting wait(time) sleep(time) join(time) parkNanos(time) parkUntiil(time) 等待信号唤醒或超时</li>
<li>Terminated</li>
</ul>
<p>​</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632994078056-1d0b44a7-e1ec-4a61-b1f4-7357293c0a0a.png#clientId=uc78e1191-c90c-4&amp;from=paste&amp;height=431&amp;id=u441c7a4d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=861&amp;originWidth=803&amp;originalType=binary&amp;ratio=1&amp;size=307491&amp;status=done&amp;style=none&amp;taskId=u5a1795f8-b0dd-45e6-bbb3-ffcafc2e65e&amp;width=401.5" alt="image.png"></p>
<h3 id="2-阻塞状态"><a href="#2-阻塞状态" class="headerlink" title="2. 阻塞状态"></a>2. 阻塞状态</h3><p>Blocked、Waiting、TimedWaiting</p>
<h2 id="5-Thread-类和-Object-类线程方法详解"><a href="#5-Thread-类和-Object-类线程方法详解" class="headerlink" title="5. Thread 类和 Object 类线程方法详解"></a>5. Thread 类和 Object 类线程方法详解</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633157925874-a5caca19-3c10-41d3-b92f-393282718634.png#clientId=ud9dfac8a-0ab2-4&amp;from=paste&amp;height=388&amp;id=u2fd4f1a0&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=775&amp;originWidth=1590&amp;originalType=binary&amp;ratio=1&amp;size=962383&amp;status=done&amp;style=none&amp;taskId=u92fdbb0c-ee29-4830-89c4-fdac321aa81&amp;width=795" alt="image.png"></p>
<h3 id="1-wait、notify、notifyAll-方法详解"><a href="#1-wait、notify、notifyAll-方法详解" class="headerlink" title="1. wait、notify、notifyAll 方法详解"></a>1. wait、notify、notifyAll 方法详解</h3><ol>
<li>阻塞阶段</li>
</ol>
<p>执行 wait 方法进入阻塞阶段</p>
<p>唤醒方法</p>
<ul>
<li>其他线程调用 notify 方法刚好唤醒阻塞线程</li>
<li>调用 notifyAll 唤醒所有阻塞线程</li>
<li>过了超时时间，自动唤醒</li>
<li>线程自身调用 interupt 方法</li>
</ul>
<p>​</p>
<ol start="2">
<li>唤醒阶段</li>
</ol>
<p>通过调用 notify 或者 notifyAll 方法<br>​</p>
<ol start="3">
<li>遇到中断</li>
</ol>
<h3 id="2-wait、notify、notifyAll-特点和性质"><a href="#2-wait、notify、notifyAll-特点和性质" class="headerlink" title="2. wait、notify、notifyAll 特点和性质"></a>2. wait、notify、notifyAll 特点和性质</h3><ul>
<li>调用 wait 方法之前必须要拥有 monitor</li>
<li>notify 只能唤醒其中一个</li>
<li>都属于 object 类</li>
</ul>
<h3 id="3-wait-原理"><a href="#3-wait-原理" class="headerlink" title="3. wait 原理"></a>3. wait 原理</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633185389200-d6496003-0e72-419a-ada9-11f03a0eadd2.png#clientId=ud9dfac8a-0ab2-4&amp;from=paste&amp;height=347&amp;id=u54b8a244&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=693&amp;originWidth=739&amp;originalType=binary&amp;ratio=1&amp;size=390644&amp;status=done&amp;style=none&amp;taskId=u8858d183-b105-4207-a257-d1802c0f057&amp;width=369.5" alt="image.png"></p>
<ol>
<li>线程进入线程节点集</li>
<li>线程节点集中的节点尝试获取锁</li>
<li>调用 wait 方法释放锁进入等待集</li>
<li>等待集中的线程等待其他线程调用 notify、notifyAll 方法将线程唤醒（线程由等待状态转为 Blocked）</li>
<li>重新唤醒的线程尝试重新获取锁</li>
<li>释放锁并退出</li>
</ol>
<h3 id="4-join-方法"><a href="#4-join-方法" class="headerlink" title="4. join 方法"></a>4. join 方法</h3><ol>
<li>作用</li>
</ol>
<p>因为新的线程要加入我们，所以我们等他执行完再执行</p>
<ol start="2">
<li>用法</li>
</ol>
<p>主线程等待需要加入的线程执行完毕<br>​</p>
<p>​</p>
<h2 id="6-线程未被捕获异常"><a href="#6-线程未被捕获异常" class="headerlink" title="6. 线程未被捕获异常"></a>6. 线程未被捕获异常</h2><h3 id="1-异常处理器解决方法"><a href="#1-异常处理器解决方法" class="headerlink" title="1. 异常处理器解决方法"></a>1. 异常处理器解决方法</h3><ol>
<li>在 run 方法中捕获异常并处理</li>
<li>实现 UncaughtExceptionHandler 接口</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633315130302-db04aac5-f7b3-47cd-a64d-27568b1185d0.png#clientId=u23d15eed-d2bc-4&amp;from=paste&amp;height=165&amp;id=u7bb4f8b8&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=330&amp;originWidth=789&amp;originalType=binary&amp;ratio=1&amp;size=49802&amp;status=done&amp;style=none&amp;taskId=udbf3fc47-8b17-486c-a35f-833cd6c5e81&amp;width=394.5" alt="image.png"></p>
<p>源码解析<br>​</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>{</span><br><span class="line">    <span class="comment">//判断线程是否存在父线程的异常处理器</span></span><br><span class="line">       <span class="keyword">if</span> (parent != <span class="keyword">null</span>) {</span><br><span class="line">           parent.uncaughtException(t, e);</span><br><span class="line">       } <span class="keyword">else</span> {</span><br><span class="line">           <span class="comment">//获取线程默认异常处理器</span></span><br><span class="line">           Thread.UncaughtExceptionHandler ueh =</span><br><span class="line">               Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">           <span class="keyword">if</span> (ueh != <span class="keyword">null</span>) {</span><br><span class="line">              <span class="comment">//调用线程默认异常处理器</span></span><br><span class="line">               ueh.uncaughtException(t, e);</span><br><span class="line">           } <span class="keyword">else</span> <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> ThreadDeath)) {</span><br><span class="line">               <span class="comment">//没有直接打印异常</span></span><br><span class="line">               System.err.print(<span class="string">"Exception in thread \""</span></span><br><span class="line">                                + t.getName() + <span class="string">"\" "</span>);</span><br><span class="line">               e.printStackTrace(System.err);</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a>2. 自定义异常处理器</h3><ol>
<li>实现 Thread.UncaughtExceptionHandler 的 uncaught 方法</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>{</span><br><span class="line">        Logger logger=Logger.getAnonymousLogger();</span><br><span class="line">        logger.log(Level.WARNING,<span class="string">"自定义异常处理器"</span>+t.getName(),e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>设置线程异常处理器</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseOwnUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h2 id="7-线程安全"><a href="#7-线程安全" class="headerlink" title="7. 线程安全"></a>7. 线程安全</h2><h3 id="1-什么是线程安全"><a href="#1-什么是线程安全" class="headerlink" title="1. 什么是线程安全"></a>1. 什么是线程安全</h3><p><strong>多个线程访问某个对象或方法时，在编写方法或对象的业务逻辑时，不需要做额外的处理（可以像单线程编程一样），程序可以正常运行（不会因为多线程而出错）</strong><br><strong>​</strong></p>
<h3 id="2-线程安全问题"><a href="#2-线程安全问题" class="headerlink" title="2. 线程安全问题"></a>2. 线程安全问题</h3><ol>
<li>运行结果错误：a++多线程问题</li>
<li>活跃性问题：死锁、活锁、饥饿</li>
<li>对象发布和初始化安全问题</li>
</ol>
<p><strong>​</strong></p>
<h2 id="8-死锁"><a href="#8-死锁" class="headerlink" title="8. 死锁"></a>8. 死锁</h2><h3 id="1-死锁概念"><a href="#1-死锁概念" class="headerlink" title="1. 死锁概念"></a>1. 死锁概念</h3><p>特点</p>
<ul>
<li>发生在并发中</li>
<li>互不相让</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633750091741-d8a67152-fa3d-4dc5-9ae7-e7092e9bbd04.png#clientId=u71005f6c-83ec-4&amp;from=paste&amp;height=301&amp;id=uf260c5fc&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=602&amp;originWidth=1298&amp;originalType=binary&amp;ratio=1&amp;size=98661&amp;status=done&amp;style=none&amp;taskId=ubca3f96e-a8ce-4c24-806c-6610f5939f4&amp;width=649" alt="image.png"></p>
<h3 id="2-死锁事例"><a href="#2-死锁事例" class="headerlink" title="2. 死锁事例"></a>2. 死锁事例</h3><ol>
<li>两个用户转账</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/9</span></span><br><span class="line"><span class="comment"> * 转账时遇到死锁情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferMoney</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Account from = <span class="keyword">new</span> Account(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">static</span> Account to = <span class="keyword">new</span> Account(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        TransferMoney user1 = <span class="keyword">new</span> TransferMoney();</span><br><span class="line">        TransferMoney user2 = <span class="keyword">new</span> TransferMoney();</span><br><span class="line">        user1.flag = <span class="number">0</span>;</span><br><span class="line">        user2.flag = <span class="number">1</span>;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(user1);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(user2);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread.join();</span><br><span class="line">        thread1.join();</span><br><span class="line">        System.out.println(from.balance);</span><br><span class="line">        System.out.println(to.balance);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) {</span><br><span class="line">            transferMoney(from, to, <span class="number">200</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) {</span><br><span class="line">            transferMoney(to, from, <span class="number">200</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferMoney</span><span class="params">(Account from, Account to, <span class="keyword">int</span> account)</span> </span>{</span><br><span class="line">        <span class="keyword">synchronized</span> (from) {</span><br><span class="line">            <span class="keyword">synchronized</span> (to) {</span><br><span class="line">                <span class="keyword">if</span> (from.balance - account &lt; <span class="number">0</span>) {</span><br><span class="line">                    System.out.println(from + <span class="string">"转账用户余额不足"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                from.balance -= account;</span><br><span class="line">                to.balance += account;</span><br><span class="line">                System.out.println(from + <span class="string">"转账成功"</span> + account + <span class="string">"元"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>{</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> balance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> balance)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>多个用户转账</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiTransferMoney</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_ACCOUNT = <span class="number">500</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户初始化金额数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_MONEY = <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_TRANSFERS = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_THREDS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Random rdm = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransferMoney.Account[] accounts = <span class="keyword">new</span> TransferMoney.Account[NUMS_ACCOUNT];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMS_ACCOUNT; i++) {</span><br><span class="line">            accounts[i] = <span class="keyword">new</span> TransferMoney.Account(NUMS_MONEY);</span><br><span class="line">        }</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_THREDS; i++) {</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> TransferMoneyThread());</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferMoneyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMS_TRANSFERS; i++) {</span><br><span class="line">                <span class="keyword">int</span> accountFromIndex;</span><br><span class="line">                <span class="keyword">int</span> accountToIndex;</span><br><span class="line">                <span class="keyword">do</span> {</span><br><span class="line">                    accountFromIndex = rdm.nextInt(NUMS_ACCOUNT);</span><br><span class="line">                    accountToIndex = rdm.nextInt(NUMS_ACCOUNT);</span><br><span class="line">                } <span class="keyword">while</span> (accountFromIndex == accountToIndex);</span><br><span class="line">                <span class="keyword">int</span> money = rdm.nextInt(NUMS_MONEY);</span><br><span class="line">                TransferMoney.transferMoney(accounts[accountFromIndex], accounts[accountToIndex], money);</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"转账结束"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="3-死锁条件"><a href="#3-死锁条件" class="headerlink" title="3. 死锁条件"></a>3. 死锁条件</h3><ol>
<li>**互斥条件 **</li>
<li><strong>请求与保持条件</strong></li>
<li><strong>不剥夺条件</strong></li>
<li><strong>循环等待条件</strong></li>
</ol>
<h3 id="4-定位死锁"><a href="#4-定位死锁" class="headerlink" title="4. 定位死锁"></a>4. 定位死锁</h3><h4 id="1-Jstack"><a href="#1-Jstack" class="headerlink" title="1. Jstack"></a>1. Jstack</h4><ol>
<li>通过 jps 获取 Java 运行程序的 pid</li>
<li>通过 jstack pid 查看对应程序的死锁情况</li>
</ol>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line">J:\JavaBase\cocurrency_tools_practice&gt;jps</span><br><span class="line">16672 TransferMoney</span><br><span class="line">17784</span><br><span class="line">19592 Jps</span><br><span class="line">4236 Launcher</span><br><span class="line"></span><br><span class="line">J:\JavaBase\cocurrency_tools_practice&gt;jstack 16672</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h3 id="5-修复死锁"><a href="#5-修复死锁" class="headerlink" title="5. 修复死锁"></a>5. 修复死锁</h3><h3 id="1-避免策略"><a href="#1-避免策略" class="headerlink" title="1. 避免策略"></a>1. 避免策略</h3><h1 id="2-并发高级"><a href="#2-并发高级" class="headerlink" title="2. 并发高级"></a>2. 并发高级</h1><h2 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1. 线程池"></a>1. 线程池</h2><h3 id="1-线程池的停止"><a href="#1-线程池的停止" class="headerlink" title="1. 线程池的停止"></a>1. 线程池的停止</h3><ol>
<li>shutdown** 关闭线程池，但是线程池需要正在执行的任务和队列中的任务执行完之后关闭**</li>
<li>shutdownNow 立刻关闭线程池，并返回任务队列中的任务。同时中断正在执行的任务</li>
<li>isShutdown 判断线程是否关闭</li>
<li>isTerminated 判断线程池是否终止运行</li>
<li>awaitTermination 判断线程池在判断延后的时间范围内线程池是否终止</li>
</ol>
<p>​</p>
<h3 id="2-拒绝策略"><a href="#2-拒绝策略" class="headerlink" title="2. 拒绝策略"></a>2. 拒绝策略</h3><ul>
<li>AbortPolicy 直接抛出异常</li>
<li>DiscardPolicy 直接抛弃任务</li>
<li>DiscardOldestPolicy 直接抛弃执行时间最长的任务</li>
<li>CallerRunsPolicy 直接返回给调用者</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h3><h4 id="1-组成部分"><a href="#1-组成部分" class="headerlink" title="1. 组成部分"></a>1. 组成部分</h4><ul>
<li>线程池管理器</li>
<li>工作线程</li>
<li>任务队列</li>
<li>任务接口</li>
</ul>
<p>​</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633444509426-74410e03-652a-40bb-98dd-0dedffb69f41.png#clientId=u23d15eed-d2bc-4&amp;from=paste&amp;height=276&amp;id=u332b0768&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=551&amp;originWidth=909&amp;originalType=binary&amp;ratio=1&amp;size=125603&amp;status=done&amp;style=none&amp;taskId=u9bf42bec-bf47-4811-bca8-b174bdd8f30&amp;width=454.5" alt="image.png"></p>
<p><strong>线程池架构图</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633444552891-52b344e1-6a04-43cd-adc0-bca35a432040.png#clientId=u23d15eed-d2bc-4&amp;from=paste&amp;height=213&amp;id=u2e1fbaed&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=425&amp;originWidth=623&amp;originalType=binary&amp;ratio=1&amp;size=63702&amp;status=done&amp;style=none&amp;taskId=u366f33eb-8333-4327-b1f0-d1db3fe43f4&amp;width=311.5" alt="image.png"></p>
<ul>
<li>Executor 线程池顶级接口</li>
<li>ExecutorService 线程池业务接口</li>
</ul>
<p>​</p>
<p><strong>线程池任务复用原理</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">      	<span class="comment">//获取线程池状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) {</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        }</span><br><span class="line">      <span class="comment">//判断线程池状态以及任务队列是否满了</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) {</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        }</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"> <span class="comment">//调用addWorker创建新的工作线程</span></span><br><span class="line">   <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) {</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) {</span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (workerAdded) {</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后调用runWorker执行当前线程的任务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>{</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) {</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        task.run();</span><br><span class="line">                    } <span class="keyword">catch</span> (RuntimeException x) {</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    } <span class="keyword">catch</span> (Error x) {</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    } <span class="keyword">catch</span> (Throwable x) {</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    } <span class="keyword">finally</span> {</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    }</span><br><span class="line">                } <span class="keyword">finally</span> {</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>线程池状态</strong></p>
<ul>
<li>Running 接受新任务并排队处理任务</li>
<li>Shutdown 不接受新任务，但处理正在运行任务</li>
<li>Stop 不接受新任务 ，也不处理队列任务，并中断正在运行任务</li>
<li>Tidying 所有任务都终止，所有工作线程为 0 并接下来执行 terminated（）钩子方法</li>
<li>Terminated 运行完成</li>
</ul>
<h2 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2. ThreadLocal"></a>2. ThreadLocal</h2><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><p>​</p>
<ol>
<li>每个线程需要一个独享的对象（工具类对象 SimpleDateFormat 和 Random）</li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/4</span></span><br><span class="line"><span class="comment"> * ThreadLocal 存放工日期格式化具类对象</span></span><br><span class="line"><span class="comment"> * 每个线程都需要存放一个独享的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadLocalNormalUsage</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String &gt; dateSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        ThreadPoolExecutor poolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            poolExecutor.execute(<span class="keyword">new</span> Runnable() {</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">                    dateParse(finalI);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateParse</span><span class="params">(<span class="keyword">int</span> i)</span> </span>{</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date(<span class="number">1000</span> * i);</span><br><span class="line">                    SimpleDateFormat dateFormat = ThreadLocalDateFormatter.dateFormatThreadLocal.get();</span><br><span class="line">                    dateSet.add(dateFormat.format(date));</span><br><span class="line">                    System.out.println(dateFormat.format(date));</span><br><span class="line">                }</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(dateSet.size());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDateFormatter</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormatThreadLocal =</span><br><span class="line">            ThreadLocal.withInitial(() -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>每个线程内需要保存全局变量，可以不同方法直接使用，避免传递参数的麻烦</li>
</ol>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ol>
<li>多线程，对象数据数据隔离</li>
<li>多线程下，轻松获取获取全局变量</li>
</ol>
<p>​</p>
<h3 id="3-好处"><a href="#3-好处" class="headerlink" title="3. 好处"></a>3. 好处</h3><ul>
<li>线程安全</li>
<li>不需要加锁，提高效率</li>
<li>线程池的情况下，节省内存开销</li>
<li>免去多线程情况下传参麻烦</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="3-原理-、源码分析"><a href="#3-原理-、源码分析" class="headerlink" title="3. 原理 、源码分析"></a>3. 原理 、源码分析</h3><p><strong>主要方法</strong><br>​</p>
<ol>
<li><strong>initialValue()</strong></li>
</ol>
<ul>
<li>返回当前线程对应的初始值，延迟加载只有第一次调用 get 时候才会触发。</li>
<li>当线程先前调用了 set()，则不会调用 initialValue()方法</li>
<li>线程最多只能调用一次该方法，除非调用 remove()删除了对应的数据，在调用 get</li>
<li>不重写默认返回 null</li>
</ul>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">     Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取当前线程的ThreadLocalMap</span></span><br><span class="line">     ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//如果对应的map不为空</span></span><br><span class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>) {</span><br><span class="line">         <span class="comment">//通过map获取对应的值</span></span><br><span class="line">         ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) {</span><br><span class="line">             <span class="meta">@SuppressWarnings("unchecked")</span></span><br><span class="line">             T result = (T)e.value;</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">         }</span><br><span class="line">     }</span><br><span class="line">    <span class="comment">//反之则调用初始化方法</span></span><br><span class="line">     <span class="keyword">return</span> setInitialValue();</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<p><strong>​</strong></p>
<p><strong>​</strong></p>
<ol start="2">
<li><strong>set()</strong></li>
</ol>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>{</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p><strong>ThreadLocalMap 类</strong><br><strong>​</strong></p>
<p><strong>键：ThreadLocal 对象</strong><br><strong>值：存储对应的值</strong><br><strong>​</strong></p>
<p><strong>ThreadLocal 哈希冲突解决办法：线性探测法（发生冲突判断下一个位置是否为空）</strong><br><strong>​</strong></p>
<p><strong>​</strong></p>
<p><strong>​</strong></p>
<h3 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4. 注意点"></a>4. 注意点</h3><ul>
<li><strong>内存泄漏问题</strong>（对象不在使用，但却无法回收）</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="3-AQS"><a href="#3-AQS" class="headerlink" title="3. AQS"></a>3. AQS</h2><h3 id="1-原理解析"><a href="#1-原理解析" class="headerlink" title="1. 原理解析"></a>1. 原理解析</h3><h4 id="1-State-状态"><a href="#1-State-状态" class="headerlink" title="1. State 状态"></a>1. State 状态</h4><p>在不同的并发类中有不同的含义<br>Semaphore 剩余许可证的数量<br>CountDownLatch 需要倒数的数量<br>ReentrantLock 表示可重入锁的次数 当 state 表示锁不被任何线程持有</p>
<h4 id="2-FIFO-队列"><a href="#2-FIFO-队列" class="headerlink" title="2.FIFO 队列"></a>2.FIFO 队列</h4><ul>
<li>存放等待线程的双向队列</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633511736158-4641796b-4219-464d-af3b-079fff214722.png#clientId=u8f654df0-be2a-4&amp;from=paste&amp;height=89&amp;id=uab7d1c76&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=178&amp;originWidth=897&amp;originalType=binary&amp;ratio=1&amp;size=82969&amp;status=done&amp;style=none&amp;taskId=u6d281669-be18-4155-9118-8281cc4ac50&amp;width=448.5" alt="image.png"></p>
<h4 id="3-工具类实现的获取-释放方法"><a href="#3-工具类实现的获取-释放方法" class="headerlink" title="3. 工具类实现的获取/释放方法"></a>3. 工具类实现的获取/释放方法</h4><ol>
<li>获取方法（<strong>导致线程阻塞</strong>）</li>
</ol>
<ul>
<li>ReentrantLock 判断 state 是否为 0，如果不为为 0 则会阻塞</li>
<li>Semaphore 通过 acquire 方法获取到 state,判断 state 是否为正数，是则 state-1 可以获取一个许可证</li>
<li>CountDownLatch 通过 await 获取 state，判断是否等于 0，如果为 0 则唤醒，反之阻塞</li>
</ul>
<p>​</p>
<p>​</p>
<ol start="2">
<li>释放方法</li>
</ol>
<ul>
<li>Semaphore 通过使用 release 方法使 state+1</li>
<li>CountDownLatch countDown 方法</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h4 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h4><h5 id="1-CountDownLatch-源码分析"><a href="#1-CountDownLatch-源码分析" class="headerlink" title="1. CountDownLatch 源码分析"></a>1. CountDownLatch 源码分析</h5><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633512858997-9e24ac55-ed62-41b7-a171-c921b56cec76.png#clientId=u8f654df0-be2a-4&amp;from=paste&amp;height=119&amp;id=uabb32415&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=237&amp;originWidth=672&amp;originalType=binary&amp;ratio=1&amp;size=49318&amp;status=done&amp;style=none&amp;taskId=ue0c7eba3-0a06-47bf-9d14-b1c1925f2f9&amp;width=336" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633573965910-d310e60f-33ca-4d66-be34-7e47a28dd28c.png#clientId=u5713b59d-1bde-4&amp;from=paste&amp;height=303&amp;id=u0979f993&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=605&amp;originWidth=917&amp;originalType=binary&amp;ratio=1&amp;size=221272&amp;status=done&amp;style=none&amp;taskId=u1e32547a-e975-4d63-bd2b-a1a588f6639&amp;width=458.5" alt="image.png"></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>{</span><br><span class="line">       <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"count &lt; 0"</span>);</span><br><span class="line">       <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">   }</span><br><span class="line"> 		Sync(<span class="keyword">int</span> count) {</span><br><span class="line">           setState(count);</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>{</span><br><span class="line">       state = newState;</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>{</span><br><span class="line">           <span class="keyword">return</span> getState();</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程等待直到倒数结束</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">       sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">   }</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">       <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">     <span class="comment">//判断是否倒数结束</span></span><br><span class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">           doAcquireSharedInterruptibly(arg);</span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">     <span class="comment">//将线程包装成一个node节点然后放入队列然后中断该线程</span></span><br><span class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           <span class="keyword">for</span> (;;) {</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">               <span class="keyword">if</span> (p == head) {</span><br><span class="line">                   <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                   <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) {</span><br><span class="line">                       setHeadAndPropagate(node, r);</span><br><span class="line">                       p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                       failed = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   }</span><br><span class="line">               }</span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">           }</span><br><span class="line">       } <span class="keyword">finally</span> {</span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       }</span><br><span class="line">   }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h5 id="2-Semaphore-源码分析"><a href="#2-Semaphore-源码分析" class="headerlink" title="2. Semaphore 源码分析"></a>2. Semaphore 源码分析</h5><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">	<span class="comment">//获取资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                <span class="keyword">if</span> (p == head) {</span><br><span class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                    <span class="comment">//如果state大于0则将线程放入阻塞队列</span></span><br><span class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) {</span><br><span class="line">                        setHeadAndPropagate(node, r);</span><br><span class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                        failed = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="comment">//公平锁的方式获取资源state</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> available = getState();</span><br><span class="line">                <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//非公平锁的方式获取资源state</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>{</span><br><span class="line">            <span class="keyword">for</span> (;;) {</span><br><span class="line">                <span class="keyword">int</span> available = getState();</span><br><span class="line">                <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<h5 id="3-ReentrantLock"><a href="#3-ReentrantLock" class="headerlink" title="3. ReentrantLock"></a>3. ReentrantLock</h5><p>​</p>
<p><strong>释放锁</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>{</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) {</span><br><span class="line">            Node h = head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尝试释放当前线程的锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>{</span><br><span class="line">            <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="comment">//判断当前线程是否持有锁</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    		<span class="comment">//判断state是否为0</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) {</span><br><span class="line">                free = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            }</span><br><span class="line">            setState(c);</span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure>

<p>流程：<br>判断当前锁对应的线程是不是该线程如果是直接 state-1,不是抛出异常，减到 0 就返回 true。并且释放当前线程的锁</p>
<p><strong>加锁方法</strong><br><strong>​</strong></p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>{</span><br><span class="line">        sync.lock();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//非公平加锁的实现</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="comment">//通过cas判断其他线程是否持有锁</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//尝试获取锁</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>{</span><br><span class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">         <span class="comment">//判断锁是否被持有</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) {</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">         <span class="comment">//判断锁的线程和当前线程是否是同一线程</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) {</span><br><span class="line">                <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//公平锁加锁</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>{</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>{</span><br><span class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) {</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) {</span><br><span class="line">                <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure>

<h3 id="2-实现简化版-ConuntDownLatch"><a href="#2-实现简化版-ConuntDownLatch" class="headerlink" title="2. 实现简化版 ConuntDownLatch"></a>2. 实现简化版 ConuntDownLatch</h3><p>步骤：</p>
<ol>
<li>创建一个类，实现获取/释放的方法</li>
<li>写一个内部类 Sync 继承 AbstractQueuedSynchronizer</li>
<li>根据锁是否独占来重写 tryAcquire/tryRelease 或 tryAcquireShared 和 tryReleaseShared 等方法</li>
</ol>
<p>​</p>
<figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/7</span></span><br><span class="line"><span class="comment"> * 自定义一次性门闩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneShortLatch</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>{</span><br><span class="line">        sync.releaseShared(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>{</span><br><span class="line">        sync.acquireShared(<span class="number">0</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>{</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>{</span><br><span class="line">            setState(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        OneShortLatch oneShortLatch = <span class="keyword">new</span> OneShortLatch();</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"尝试获取latch"</span>);</span><br><span class="line">                oneShortLatch.await();</span><br><span class="line">                System.out.println(<span class="string">"门闩调用了放行方法"</span>);</span><br><span class="line">            }).start();</span><br><span class="line">        }</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        oneShortLatch.signal();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<p>​</p>
</body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>Java高级</tag>
      </tags>
  </entry>
</search>
