<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Buttterfly美化教程集合</title>
    <url>/2021/12/20/Buttterfly%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<html><head></head><body><h1 id="1-设置背景渐变效果"><a href="#1-设置背景渐变效果" class="headerlink" title="1. 设置背景渐变效果"></a>1. 设置背景渐变效果</h1><h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640016968691-40cf8542-0c0d-476f-a342-ef7803df0029.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=167&amp;id=ua08fe870&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=334&amp;originWidth=1134&amp;originalType=binary&amp;ratio=1&amp;size=156444&amp;status=done&amp;style=none&amp;taskId=u6648ddf4-3cf6-4796-94e8-d4a74dfc23b&amp;width=567" alt="image.png"></p>
<h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置。 由于每个人用的 butterfly 版本不同，所以修改的不一定是#body-wrap。具体需要通过在页面上使用<code>F12</code>，查看标签对应的 id。<img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017441534-b130e721-df0c-4ca7-b538-913c9c50d77f.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;id=u3e0effb6&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=27&amp;originWidth=419&amp;originalType=binary&amp;ratio=1&amp;size=3831&amp;status=done&amp;style=none&amp;taskId=u8e1396fd-4db0-4b4e-beb8-da4f152e19a" alt="image.png"></li>
</ol>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改文章页背景及透明度 */</span></span><br><span class="line"><span class="selector-id">#body-wrap</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="2-页脚渐变透明"><a href="#2-页脚渐变透明" class="headerlink" title="2. 页脚渐变透明"></a>2. 页脚渐变透明</h1><h2 id="1-效果图-1"><a href="#1-效果图-1" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017580407-35c4e83d-2e35-4bb0-b987-02d04521b0db.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=106&amp;id=uc27f3f41&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=211&amp;originWidth=1752&amp;originalType=binary&amp;ratio=1&amp;size=33379&amp;status=done&amp;style=none&amp;taskId=ubaba17b1-ed4e-429d-93fd-31a2418926b&amp;width=876" alt="image.png"></p>
<h2 id="2-步骤-1"><a href="#2-步骤-1" class="headerlink" title="2. 步骤"></a>2. 步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置</li>
</ol>
<figure class="highlight css"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明渐变 */</span></span><br><span class="line"><span class="selector-id">#footer</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">100%</span>) <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> {</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="3-页脚徽标设置"><a href="#3-页脚徽标设置" class="headerlink" title="3. 页脚徽标设置"></a>3. 页脚徽标设置</h1><h2 id="1-效果图-2"><a href="#1-效果图-2" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017751461-338d3075-c47d-4fc5-9e9b-e6d863333636.png#clientId=u69b8f327-ff26-4&amp;from=paste&amp;height=30&amp;id=u8575727c&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=59&amp;originWidth=878&amp;originalType=binary&amp;ratio=1&amp;size=10582&amp;status=done&amp;style=none&amp;taskId=uefa87f9e-ab64-4c2c-b25f-6ead943b2af&amp;width=439" alt="image.png"></p>
<h2 id="2-步骤-2"><a href="#2-步骤-2" class="headerlink" title="2.步骤"></a>2.步骤</h2><p>在_cofing.yml 中添加如下配置</p>
<figure class="highlight yaml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;p&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://hexo.io/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo"</span> <span class="string">title="博客框架为</span> <span class="string">Hexo"</span> <span class="string">alt="HEXO"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://butterfly.js.org/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender"</span> <span class="string">title="主题采用</span> <span class="string">Butterfly"</span> <span class="string">alt="Butterfly"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://www.jsdelivr.com/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr"</span> <span class="string">title="本站使用</span> <span class="string">Jsdelivr</span> <span class="string">为静态资源提供CDN加速"</span> <span class="string">alt="Jsdelivr"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"</span> <span class="string">href="https://github.com/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub"</span> <span class="string">title="本站项目由</span> <span class="string">GitHub</span> <span class="string">托管"</span> <span class="string">alt="GitHub"&gt;&lt;/a&gt;&lt;a</span> <span class="string">style="margin-inline:5px"target="_blank"href="http://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;&lt;img</span> <span class="string">src="https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris"</span> <span class="string">alt="img"</span> <span class="string">title="本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可"&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></tbody></table></figure>

<p><a href="http://img.wuxin.website/img/b3f6b2565c3149a2a8df94ab43cf3a3b.jpg">
</a></p>
</body></html>]]></content>
      <categories>
        <category>Butterfly</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Butterfly</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-汉明距离</title>
    <url>/2021/01/16/LeetCode-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
    <content><![CDATA[<html><head></head><body><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><img src="https://img-blog.csdnimg.cn/img_convert/eb8bf20167f1cc2d7f1d9c054ec9d21b.png#id=rp6JQ&amp;originHeight=609&amp;originWidth=745&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>这里有两种解题思路</p>
<h2 id="1-位运算法"><a href="#1-位运算法" class="headerlink" title="1. 位运算法"></a>1. 位运算法</h2><p><strong>位运算</strong>如果你不了解的话，可以看下第二种解题思路。但是整体代码有点冗余，而且效率也不高。<br><code>^</code>的运算规则二进制位中各个位上数就是相同为 0，不同为 1。<br><code>&amp;</code>的运算规则是都为 1 时结果为 1，反之全为 0。<br><code>|</code>的运算规则是只要有 1 结果为 1，反之为 0。<br><code>&gt;&gt;</code>当前数二级制向右移一位，同时最高位根据数的正负来补 0 或 1<br><code>&lt;&lt;</code> 当前数二进制向左移一位，同时最低位补 0。</p>
<p><strong>位运算法</strong></p>
<ol>
<li> 将两个数<code>^</code>运算</li>
<li>判断运算结果中 1 的个数。即为两个数二进制中各个位的值不同的个数<br> 这里有两种计算 1 个数的方法<br> 2.1.1 &nbsp; 将运算结果按 2 求余，如果为 1 就个数加 1。反之就忽略<br> 2.1.2 将运算结果右移一位。并重复上述步骤 32 次。<br> 2.2.1 将运算结果和运算结果-1 进行<code>&amp;</code>运算，然后将值返回作为新的运算结果。1 的个数加 1。<br> 2.2.2 直到运算结果为 0 时跳出循环</li>
</ol>
<h2 id="2-暴力破解法"><a href="#2-暴力破解法" class="headerlink" title="2. 暴力破解法"></a>2. 暴力破解法</h2><ol>
<li>将上述两个数将其二进制位分别放入到不同的 List 容器中</li>
<li>判断两个容器的长度，将长度较大的容器作为遍历次数</li>
<li>获取两个容器中当前索引的值，并判断是否相等，如果不等距离加 1</li>
<li>如果较小容器遍历完了的话，就判断较大容器中的值是否等于 0。如果不等距离加 1</li>
<li>最后得到的距离即为结果</li>
</ol>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="1-位运算"><a href="#1-位运算" class="headerlink" title="1.位运算"></a>1.位运算</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">     <span class="keyword">int</span> res=x^y;</span><br><span class="line">     <span class="keyword">int</span> times=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span>(res!=<span class="number">0</span>){</span><br><span class="line">       res=res&amp;(res-<span class="number">1</span>);</span><br><span class="line">       times++;</span><br><span class="line">   }</span><br><span class="line">   <span class="keyword">return</span> times;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure>

<h2 id="2-暴力破解"><a href="#2-暴力破解" class="headerlink" title="2.暴力破解"></a>2.暴力破解</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hammingDistance</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">       ArrayList&lt;Integer&gt; xArray=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">do</span>{</span><br><span class="line">       xArray.add(x%<span class="number">2</span>);</span><br><span class="line">       x=x/<span class="number">2</span>;</span><br><span class="line">     }<span class="keyword">while</span>(x!=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       ArrayList&lt;Integer&gt; yArray=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="keyword">do</span>{</span><br><span class="line">       yArray.add(y%<span class="number">2</span>);</span><br><span class="line">       y=y/<span class="number">2</span>;</span><br><span class="line">     }<span class="keyword">while</span>(y!=<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> distance=<span class="number">0</span>;</span><br><span class="line">       <span class="comment">//当y的二进制更长时</span></span><br><span class="line">       <span class="keyword">if</span>(yArray.size()&gt;=xArray.size()){</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;yArray.size();j++){</span><br><span class="line">                <span class="keyword">if</span>(j&lt;xArray.size()){</span><br><span class="line">                   <span class="keyword">if</span>(yArray.get(j)!=xArray.get(j)){</span><br><span class="line">                       distance++;</span><br><span class="line">                   }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(yArray.get(j)!=<span class="number">0</span>){</span><br><span class="line">                        distance++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">       }<span class="keyword">else</span>{<span class="comment">//x的二进制更长</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;xArray.size();j++){</span><br><span class="line">               <span class="keyword">if</span>(j&lt;yArray.size()){</span><br><span class="line">                   <span class="keyword">if</span>(yArray.get(j)!=xArray.get(j)){</span><br><span class="line">                       distance++;</span><br><span class="line">                   }</span><br><span class="line">                }<span class="keyword">else</span>{</span><br><span class="line">                    <span class="keyword">if</span>(xArray.get(j)!=<span class="number">0</span>){</span><br><span class="line">                        distance++;</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> distance;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我一开始使用的暴力破解法。但觉得暴力破解法太麻烦了。所以就去看了官方的解题教程，发现位运算这一方法更为简单和高效。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode之合并二叉树</title>
    <url>/2020/12/19/LeetCode%E4%B9%8B%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>​</p>
<p>​</p>
<h1 id="合并二叉树"><a href="#合并二叉树" class="headerlink" title="合并二叉树"></a>合并二叉树</h1><h2 id="1-题目"><a href="#1-题目" class="headerlink" title="1. 题目"></a>1. 题目</h2><p><img src="https://img-blog.csdnimg.cn/20201219005707214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=ZaF2E&amp;originHeight=739&amp;originWidth=698&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="2-解题思路"><a href="#2-解题思路" class="headerlink" title="2. 解题思路"></a>2. 解题思路</h2><p>采用递归和后序遍历的方式来同时遍历两棵树。遍历的同时，一定要判断两颗树的当前节点是否为空。然后创建一个新的节点，节点值为两个节点之和。遍历完成后即可得到合并后的树。</p>
<h2 id="3-解题步骤"><a href="#3-解题步骤" class="headerlink" title="3. 解题步骤"></a>3. 解题步骤</h2><ol>
<li> 判断当前两颗树的节点全为空，如果为空则返回空。</li>
<li> 反之有以下三种</li>
</ol>
<ul>
<li>可能两个节点都不为空</li>
<li>左节点为空，右节点不为空</li>
<li>右节点为空，左节点不为空</li>
</ul>
<ol start="3">
<li> 采取以下措施</li>
</ol>
<ul>
<li>当为第一种情况时 ,创建一个新的节点，节点值为左右节点值的和,之后遍历左右节点</li>
<li>当为第二种情况时 ,创建一个新的节点，节点值为右节点值,之后遍历右节点.</li>
<li>当为第三种情况时 ,创建一个新的节点，节点值为左节点值,之后遍历左节点。</li>
</ul>
<ol start="4">
<li> 返回创建的新的节点。</li>
</ol>
<h2 id="4-代码"><a href="#4-代码" class="headerlink" title="4. 代码"></a>4. 代码</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode t1, TreeNode t2)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(t1==<span class="keyword">null</span>&amp;&amp;t2==<span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            TreeNode t3;</span><br><span class="line">            <span class="keyword">if</span>(t1!=<span class="keyword">null</span>&amp;&amp;t2!=<span class="keyword">null</span>){</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t1.val+t2.val);</span><br><span class="line">                t3.right=mergeTrees(t1.right,t2.right);</span><br><span class="line">                t3.left=mergeTrees(t1.left,t2.left);</span><br><span class="line">            }<span class="keyword">else</span> <span class="keyword">if</span>(t1!=<span class="keyword">null</span>){</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t1.val);</span><br><span class="line">                t3.right=mergeTrees(t1.right,<span class="keyword">null</span>);</span><br><span class="line">                t3.left=mergeTrees(t1.left,<span class="keyword">null</span>);</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                t3=<span class="keyword">new</span> TreeNode(t2.val);</span><br><span class="line">                t3.right=mergeTrees(<span class="keyword">null</span>,t2.right);</span><br><span class="line">                t3.left=mergeTrees(<span class="keyword">null</span>,t2.left);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> t3;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>以目前我做的与树相关的题目来说。所需要做的事基本上就是一件事：<strong>遍历</strong>。而树的遍历一般可以通过递归的方式来进行一些简单的遍历。遍历一般分为三种：前序遍历、中序遍历、后序遍历。前序、中序、后序的名字是按照遍历中父节点，相对于左右子节点中的顺序。如果父节点，在其子父节点中最后一个遍历，称之为后序遍历。其他的遍历顺序可由以上类推。<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode将有序数组转化为二叉搜索树</title>
    <url>/2020/12/20/LeetCode%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E5%8C%96%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="一、将有序数组转化为二叉搜索树"><a href="#一、将有序数组转化为二叉搜索树" class="headerlink" title="一、将有序数组转化为二叉搜索树"></a>一、将有序数组转化为二叉搜索树</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/20201219235754380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=a4Uzj&amp;originHeight=547&amp;originWidth=573&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><strong>详情链接：</strong><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/">有序数组转二叉树</a></p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1-解题思路"><a href="#1-解题思路" class="headerlink" title="1.解题思路"></a>1.解题思路</h2><p>将当前数组的中间值用于创建当前的节点，然后中间值左边的数，分为一个新的子数组，这里我们暂且叫左子数组，将右边的分为右子数组。将左子数组放入当前节点的左子树。右子树组，放入当前节点的右子树。重复上述步骤即可。</p>
<h2 id="2-解题步骤"><a href="#2-解题步骤" class="headerlink" title="2.解题步骤"></a>2.解题步骤</h2><ol>
<li>创建一个新的节点节点值为数组的中位值 。</li>
<li>判断当前子数组大小是否为 1。</li>
</ol>
<ul>
<li>如果为 1，则直接返回该节点。</li>
<li>反之执行第三步。</li>
</ul>
<ol>
<li>判断当前数组的 <strong>(中间值得索引-1)&gt;=0</strong>， <strong>就是判断当前节点是否存在左子树</strong>。</li>
</ol>
<ul>
<li><pre><code>如果大于0，创建一个新的数组命名为左子数组，值为当前数组的中间值左边的所有数值。然后将将左子数组传入当前函数执行。
</code></pre>
</li>
<li>反之，则表明数组越界。直接执行第四步</li>
</ul>
<ol>
<li>判断当前数组的**(中间值的索引是+1)&lt;=当前数组的长度** ，就是判断当前节点是否存在右子树。</li>
</ol>
<ul>
<li>如果小于的话，创建一个新的数组命名为右子数组，值为当前数组的中间值右边的所有数值。然后将将右子数组传入当前函数执行。</li>
<li>反之，执行第五步</li>
</ul>
<ol>
<li>返回当前节点。</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length==<span class="number">0</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }{</span><br><span class="line">            <span class="keyword">return</span> arrrayToBST(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">arrrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> start ,<span class="keyword">int</span> end)</span></span>{</span><br><span class="line">       <span class="keyword">int</span> length=end-start+<span class="number">1</span>;</span><br><span class="line">        TreeNode root=<span class="keyword">new</span> TreeNode(nums[start+length/<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(start==end){</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }<span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(length/<span class="number">2</span>-<span class="number">1</span>&gt;=<span class="number">0</span>){</span><br><span class="line"></span><br><span class="line">                root.left=arrrayToBST(nums,start,start+length/<span class="number">2</span>-<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(length/<span class="number">2</span>+<span class="number">1</span>&lt;=length-<span class="number">1</span>){</span><br><span class="line"></span><br><span class="line">                root.right=arrrayToBST(nums,start+length/<span class="number">2</span>+<span class="number">1</span>,end);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>树的问题一般是通过递归和三种遍历方式来解决。目前我所写的很多树的比较简单的题目都是通过递归和树的三种遍历方式来实现的。</p>
<p><strong>各位大佬们看完后觉得我写得很差的的话，可以在评论去疯狂踩踏我蹂躏我。但是最最为重要的事就是不要白嫖！！！！虽然我知道在看的各位都是白嫖党！！！！</strong></p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode递增顺序查找树</title>
    <url>/2021/01/04/LeetCode%E9%80%92%E5%A2%9E%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
    <content><![CDATA[<html><head></head><body><h1 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h1><p><img src="https://img-blog.csdnimg.cn/20210104232857846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=sJMFS&amp;originHeight=560&amp;originWidth=770&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><a href="https://leetcode-cn.com/problems/increasing-order-search-tree/">题目详情链接</a></p>
<h1 id="一、解题思路"><a href="#一、解题思路" class="headerlink" title="一、解题思路"></a>一、解题思路</h1><p>将原树进行中序遍历将树中的节点的非空值放入到一个 list 集合中，创建一棵新树然后通过递归的方式将不断生成的新的右子树直到集合遍历完。</p>
<h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">1.对原树进行中序遍历。将非空树的值一次放入到List集合中。</span><br><span class="line">2.创建一个函数用于对集合进行遍历，将每次遍历得到的值用来创建当前树的值。</span><br><span class="line">  在集合遍历完之前，继续递归该函数，将传递的实参改为当前树的右子树。</span><br></pre></td></tr></tbody></table></figure>

<h1 id="三、代码"><a href="#三、代码" class="headerlink" title="三、代码"></a>三、代码</h1><figure class="highlight java"><table><tbody><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">increasingBST</span><span class="params">(TreeNode root)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>){</span><br><span class="line">           ArrayList array=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            Solution s=<span class="keyword">new</span> Solution();</span><br><span class="line">            s.inOrderTraversal(root,array);</span><br><span class="line">           root=s.toTree(<span class="keyword">null</span>,array,<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">	<span class="comment">//通过递归的方式不断将集合中的值有做新的右子树的值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">toTree</span><span class="params">(TreeNode root,List&lt;Integer&gt; array,<span class="keyword">int</span> length)</span></span>{</span><br><span class="line">        root=<span class="keyword">new</span> TreeNode(array.get(length));</span><br><span class="line">        root.left=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(length&lt;array.size()-<span class="number">1</span>){</span><br><span class="line">            length++;</span><br><span class="line">            root.right=toTree(root.right,array,length);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">	<span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversal</span><span class="params">(TreeNode root,List&lt;Integer&gt; array)</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>){</span><br><span class="line">           <span class="keyword">return</span> ;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">           inOrderTraversal(root.left,array);</span><br><span class="line">           array.add(root.val);</span><br><span class="line">           inOrderTraversal(root.right,array);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我看来树的重点需要掌握的就是树的遍历方式。前序、中序、后序、层序。基本上许多和树有关的题目都会涉及到他的遍历方式。这些方式都可以通过递归的方式来实现。</p>
</body></html>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>标题名</title>
    <url>/2021/12/21/%E6%B5%8B%E8%AF%95%E8%AF%AD%E9%9B%80%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>​</p>
<hr>
<p>title: 标题名<br>comments: true<br>date: 2021/12/21 14:38:04<br>categories: 目录名<br>tags: [标签名 1,2,3]</p>
<hr>
<p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<h2 id="测试部署测试部署测试部署"><a href="#测试部署测试部署测试部署" class="headerlink" title="测试部署测试部署测试部署"></a>测试部署测试部署测试部署</h2><p>title: 标题名<br>comments: true<br>date: 2021/12/21 14:38:04<br>categories: 目录名<br>tags: [标签名 1,2,3]</p>
<hr>
<p>​</p>
<p>123123123<br>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署<br>测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>​</p>
<p>​</p>
<p>123123123 测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署测试部署测试部署测试部署<br>测试部署测试部署测试部署<br>测试部署测试部署测试部署</p>
</body></html>]]></content>
      <categories>
        <category>目录名</category>
      </categories>
      <tags>
        <tag>标签名1</tag>
        <tag>2</tag>
        <tag>3</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity中执行表单登录认证时无法执行loadUserByUsername方法</title>
    <url>/2021/05/13/SpringSecurity%E4%B8%AD%E6%89%A7%E8%A1%8C%E8%A1%A8%E5%8D%95%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81%E6%97%B6%E6%97%A0%E6%B3%95%E6%89%A7%E8%A1%8CloadUserByUsername%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<html><head></head><body><p>​</p>
<p>​</p>
<h1 id="项目场景："><a href="#项目场景：" class="headerlink" title="项目场景："></a>项目场景：</h1><p>执行表单登录认证时配置了 loginProcessUrl 和 loginPage。但是执行登录认证时并不执行 UserDetailsService 接口的 loadByUsername 方法。导致认证失败。</p>
<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><h2 id="1-表单登录页面"><a href="#1-表单登录页面" class="headerlink" title="1. 表单登录页面"></a>1. 表单登录页面</h2><p><img src="https://img-blog.csdnimg.cn/20210513173942750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=vD5Kl&amp;originHeight=213&amp;originWidth=806&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="2-配置类"><a href="#2-配置类" class="headerlink" title="2. 配置类"></a>2. 配置类</h2><p><img src="https://img-blog.csdnimg.cn/20210513173201531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=jxOTr&amp;originHeight=285&amp;originWidth=983&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h2 id="3-loadUserByUsername-方法"><a href="#3-loadUserByUsername-方法" class="headerlink" title="3. loadUserByUsername 方法"></a>3. loadUserByUsername 方法</h2><p><img src="https://img-blog.csdnimg.cn/20210513173433199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=msIDN&amp;originHeight=219&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h4 id="所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印-loadUserByUsername-方法中的日志。"><a href="#所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印-loadUserByUsername-方法中的日志。" class="headerlink" title="所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印 loadUserByUsername 方法中的日志。"></a>所有都配置好了，但是进行登录认证的时候还是认证失败跳回登录页。并且控制台未打印 loadUserByUsername 方法中的日志。</h4><p><img src="https://img-blog.csdnimg.cn/20210513173819188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=CEEDw&amp;originHeight=259&amp;originWidth=902&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br><img src="https://img-blog.csdnimg.cn/20210513173839414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODIwODk2,size_16,color_FFFFFF,t_70#id=n9Noa&amp;originHeight=227&amp;originWidth=1798&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"></p>
<h1 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h1><p>因此判断是 loginProcessUrl 方法的问题。进入 loginProcessUrl 方法内部发现。关键信息<br><img src="https://img-blog.csdnimg.cn/20210513174339209.png#id=h0HbJ&amp;originHeight=117&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;status=done&amp;style=none"><br>登录表单申请方式必须为 post 才行，springsecurity 才会进行登录认证。</p>
<hr>
<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><h2 id="将登录表单中提交方法更改为-post-方式即可"><a href="#将登录表单中提交方法更改为-post-方式即可" class="headerlink" title="将登录表单中提交方法更改为 post 方式即可"></a>将登录表单中提交方法更改为 post 方式即可</h2></body></html>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SpringSecurity</tag>
        <tag>开发问题</tag>
      </tags>
  </entry>
</search>
