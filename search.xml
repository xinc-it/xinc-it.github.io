<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Buttterfly美化教程集合</title>
    <url>/2021/12/20/Buttterfly%E7%BE%8E%E5%8C%96%E6%95%99%E7%A8%8B%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="1-设置背景渐变效果"><a href="#1-设置背景渐变效果" class="headerlink" title="1. 设置背景渐变效果"></a>1. 设置背景渐变效果</h1><h2 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1.效果图"></a>1.效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640016968691-40cf8542-0c0d-476f-a342-ef7803df0029.png#clientId=u69b8f327-ff26-4&from=paste&height=167&id=ua08fe870&margin=%5Bobject%20Object%5D&name=image.png&originHeight=334&originWidth=1134&originalType=binary&ratio=1&size=156444&status=done&style=none&taskId=u6648ddf4-3cf6-4796-94e8-d4a74dfc23b&width=567" alt="image.png"></p>
<h2 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2.步骤"></a>2.步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置。 由于每个人用的 butterfly 版本不同，所以修改的不一定是#body-wrap。具体需要通过在页面上使用<code>F12</code>，查看标签对应的 id。<img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017441534-b130e721-df0c-4ca7-b538-913c9c50d77f.png#clientId=u69b8f327-ff26-4&from=paste&id=u3e0effb6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=27&originWidth=419&originalType=binary&ratio=1&size=3831&status=done&style=none&taskId=u8e1396fd-4db0-4b4e-beb8-da4f152e19a" alt="image.png"></li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 修改文章页背景及透明度 */</span></span><br><span class="line"><span class="selector-id">#body-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-o-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-ms-linear-gradient</span>(</span><br><span class="line">    <span class="number">0deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">247</span>, <span class="number">149</span>, <span class="number">51</span>, <span class="number">0.1</span>) <span class="number">0</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">243</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">0.1</span>) <span class="number">15%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">239</span>, <span class="number">78</span>, <span class="number">123</span>, <span class="number">0.1</span>) <span class="number">30%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">161</span>, <span class="number">102</span>, <span class="number">171</span>, <span class="number">0.1</span>) <span class="number">44%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">80</span>, <span class="number">115</span>, <span class="number">184</span>, <span class="number">0.1</span>) <span class="number">58%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">16</span>, <span class="number">152</span>, <span class="number">173</span>, <span class="number">0.1</span>) <span class="number">72%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">7</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">0.1</span>) <span class="number">86%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">109</span>, <span class="number">186</span>, <span class="number">130</span>, <span class="number">0.1</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="2-页脚渐变透明"><a href="#2-页脚渐变透明" class="headerlink" title="2. 页脚渐变透明"></a>2. 页脚渐变透明</h1><h2 id="1-效果图-1"><a href="#1-效果图-1" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017580407-35c4e83d-2e35-4bb0-b987-02d04521b0db.png#clientId=u69b8f327-ff26-4&from=paste&height=106&id=uc27f3f41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=211&originWidth=1752&originalType=binary&ratio=1&size=33379&status=done&style=none&taskId=ubaba17b1-ed4e-429d-93fd-31a2418926b&width=876" alt="image.png"></p>
<h2 id="2-步骤-1"><a href="#2-步骤-1" class="headerlink" title="2. 步骤"></a>2. 步骤</h2><ol>
<li>在博客根目录下的<code>themes\butterfly\source\css</code>创建一个 css 后缀文件</li>
<li>在新建的后缀文件中添加如下配置</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 页脚透明渐变 */</span></span><br><span class="line"><span class="selector-id">#footer</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span><br><span class="line">  backdrop-<span class="attribute">filter</span>: <span class="built_in">saturate</span>(<span class="number">100%</span>) <span class="built_in">blur</span>(<span class="number">5px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#footer</span> <span class="selector-id">#footer-wrap</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="3-页脚徽标设置"><a href="#3-页脚徽标设置" class="headerlink" title="3. 页脚徽标设置"></a>3. 页脚徽标设置</h1><h2 id="1-效果图-2"><a href="#1-效果图-2" class="headerlink" title="1. 效果图"></a>1. 效果图</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1640017751461-338d3075-c47d-4fc5-9e9b-e6d863333636.png#clientId=u69b8f327-ff26-4&from=paste&height=30&id=u8575727c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=59&originWidth=878&originalType=binary&ratio=1&size=10582&status=done&style=none&taskId=uefa87f9e-ab64-4c2c-b25f-6ead943b2af&width=439" alt="image.png"></p>
<h2 id="2-步骤-2"><a href="#2-步骤-2" class="headerlink" title="2.步骤"></a>2.步骤</h2><p>在_cofing.yml 中添加如下配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&lt;p&gt;&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://hexo.io/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo&quot;</span> <span class="string">title=&quot;博客框架为</span> <span class="string">Hexo&quot;</span> <span class="string">alt=&quot;HEXO&quot;&gt;&lt;/a&gt;&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender&quot;</span> <span class="string">title=&quot;主题采用</span> <span class="string">Butterfly&quot;</span> <span class="string">alt=&quot;Butterfly&quot;&gt;&lt;/a&gt;&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://www.jsdelivr.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr&quot;</span> <span class="string">title=&quot;本站使用</span> <span class="string">Jsdelivr</span> <span class="string">为静态资源提供CDN加速&quot;</span> <span class="string">alt=&quot;Jsdelivr&quot;&gt;&lt;/a&gt;&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;</span> <span class="string">href=&quot;https://github.com/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub&quot;</span> <span class="string">title=&quot;本站项目由</span> <span class="string">GitHub</span> <span class="string">托管&quot;</span> <span class="string">alt=&quot;GitHub&quot;&gt;&lt;/a&gt;&lt;a</span> <span class="string">style=&quot;margin-inline:5px&quot;target=&quot;_blank&quot;href=&quot;http://creativecommons.org/licenses/by-nc-sa/4.0/&quot;&gt;&lt;img</span> <span class="string">src=&quot;https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris&quot;</span> <span class="string">alt=&quot;img&quot;</span> <span class="string">title=&quot;本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可&quot;&gt;&lt;/a&gt;&lt;/p&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>目录名</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JUC</title>
    <url>/2021/12/18/JUC/</url>
    <content><![CDATA[<p>​</p>
<h1 id="1-并发基础"><a href="#1-并发基础" class="headerlink" title="1. 并发基础"></a>1. 并发基础</h1><h2 id="1-多线程实现"><a href="#1-多线程实现" class="headerlink" title="1. 多线程实现"></a>1. 多线程实现</h2><h3 id="1-实现方法分类"><a href="#1-实现方法分类" class="headerlink" title="1. 实现方法分类"></a>1. 实现方法分类</h3><ol>
<li>继承 Thread 类，重写 run 方法</li>
<li>实现 Runnable 接口，实现 run 方法</li>
</ol>
<p>​</p>
<h3 id="2-两种方法对比"><a href="#2-两种方法对比" class="headerlink" title="2.两种方法对比"></a>2.两种方法对比</h3><ul>
<li>实现 runnable 接口更好</li>
</ul>
<ol>
<li> Java 只支持单继承，继承 Thread 类导致程序拓展性不好</li>
<li> 解耦，将创建线程和线程任务调度分离了</li>
</ol>
<ul>
<li>两种方法本质区别对比</li>
</ul>
<ol>
<li>继承 Thread 类是通过重写 Thread 类的方法</li>
<li>实现 Runnable 是在 Thread 类中调用 Runnable 实现类的 run 方法</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632972177969-fad65c06-bcc6-44e4-b2b1-6ca907ef17f6.png#clientId=uc78e1191-c90c-4&from=paste&height=88&id=u87fc8e3c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=175&originWidth=798&originalType=binary&ratio=1&size=17698&status=done&style=none&taskId=ue1385ff3-9acf-4f86-9c7b-9dc189b4937&width=399" alt="image.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632975139265-558c5dc8-a5c9-4d7e-a3a2-f7776812b1d3.png#clientId=uc78e1191-c90c-4&from=paste&height=179&id=uf1f15e3b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=358&originWidth=911&originalType=binary&ratio=1&size=208968&status=done&style=none&taskId=u470653a7-2d58-4d6c-8e55-e0f0f3b1a54&width=455.5" alt="image.png"></p>
<p><strong>思考题：同时使用两种方法实现多线程</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BothRunnableThread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//实现Runnable接口的方法</span></span><br><span class="line">            System.out.println(<span class="string">&quot;我来自Runnable&quot;</span>);</span><br><span class="line">        &#125;) &#123;</span><br><span class="line">            <span class="comment">//重写Thread类的run方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;我来自Thread&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果<br>​</p>
<p>我来自 Thread<br>​</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h3><p><strong>实现线程创建的方法:只有一种通过 Thread 类来创建线程</strong><br><strong>实现线程执行方法：</strong></p>
<ol>
<li><strong>实现 Runnable 接口的 run 方法，并把接口实例传给 Thread 类在其 Thread 类中的 run 方法中调用</strong></li>
<li><strong>重写 Thread 类的 run 方法</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632972177969-fad65c06-bcc6-44e4-b2b1-6ca907ef17f6.png#clientId=uc78e1191-c90c-4&from=paste&height=88&id=E0Gbe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=175&originWidth=798&originalType=binary&ratio=1&size=17698&status=done&style=none&taskId=ue1385ff3-9acf-4f86-9c7b-9dc189b4937&width=399" alt="image.png"><br>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h3 id="错误观点"><a href="#错误观点" class="headerlink" title="错误观点"></a>错误观点</h3><ol>
<li>线程池也是创建线程的一种方式（其本质还是通过 Thread 类来创建线程）</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632973964491-96ae041b-cac4-4e5c-9c8f-5a06fcf1da7f.png#clientId=uc78e1191-c90c-4&from=paste&height=152&id=u79391c98&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=951&originalType=binary&ratio=1&size=42157&status=done&style=none&taskId=u93535749-5529-4f24-9947-c8d937f09d8&width=475.5" alt="image.png"></p>
<ol start="2">
<li>Callable 也是创建线程的一种方式（本质是调用其创建一个内部线程执行 run 方法在 run 方法内部调用 callable 的 call 方法）</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632976285825-263a51fb-e842-4cec-8206-67a41403c8ac.png#clientId=uc78e1191-c90c-4&from=paste&height=312&id=u645da87e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=624&originWidth=917&originalType=binary&ratio=1&size=58810&status=done&style=none&taskId=ufa52c3d1-c751-48ce-a2ed-806eaadbca4&width=458.5" alt="image.png"><a href="https://blog.csdn.net/xzongyuan/article/details/71378769">FutureTask 与 Callable 的本质</a><br>​</p>
<p>​</p>
<h3 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h3><h4 id="1-多少种线程实现方法"><a href="#1-多少种线程实现方法" class="headerlink" title="1. 多少种线程实现方法"></a>1. 多少种线程实现方法</h4><p>参考总结</p>
<h4 id="2-Runnable-和-Thread-类那种方法实现多线程更好"><a href="#2-Runnable-和-Thread-类那种方法实现多线程更好" class="headerlink" title="2. Runnable 和 Thread 类那种方法实现多线程更好"></a>2. Runnable 和 Thread 类那种方法实现多线程更好</h4><p>Runnable 好</p>
<ol>
<li>职责分离： Runnable 定义了执行内容，Thread 类用于创建线程权责分明</li>
<li>提高性能：每次执行一次任务，都需要新建一个独立的线程，如果还想执行这个任务，就必须再新建一个继承了 Thread 类的类，整个线程从开始创建到执行完毕被销毁，这一系列的操作比 run() 方法打印文字本身带来的开销要大得多，相当于捡了芝麻丢了西瓜，得不偿失。如果我们使用实现 Runnable 接口的方式，就可以把任务直接传入线程池，使用一些固定的线程来完成任务，不需要每次新建销毁线程，大大降低了性能开销。</li>
<li>Java 只支持单继承</li>
</ol>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="2-线程的启动"><a href="#2-线程的启动" class="headerlink" title="2. 线程的启动"></a>2. 线程的启动</h2><h3 id="1-start-和-run-方法比较"><a href="#1-start-和-run-方法比较" class="headerlink" title="1. start 和 run 方法比较"></a>1. start 和 run 方法比较</h3><h4 id="1-start-方法"><a href="#1-start-方法" class="headerlink" title="1. start 方法"></a>1. start 方法</h4><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ol>
<li> 启动新线程</li>
<li> 新线程的准备工作</li>
</ol>
<h5 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h5><p><strong>执行流程</strong></p>
<ol>
<li><strong>判断线程状态</strong></li>
<li><strong>将线程加入线程组</strong></li>
<li><strong>调用 start0 方法</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class="line"><span class="comment">    * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * The result is that two threads are running concurrently: the</span></span><br><span class="line"><span class="comment">    * current thread (which returns from the call to the</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class="line"><span class="comment">    * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * It is never legal to start a thread more than once.</span></span><br><span class="line"><span class="comment">    * In particular, a thread may not be restarted once it has completed</span></span><br><span class="line"><span class="comment">    * execution.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class="line"><span class="comment">    *               started.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>        #run()</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span>        #stop()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class="line"><span class="comment">        * group threads created/set up by the VM. Any new functionality added</span></span><br><span class="line"><span class="comment">        * to this method in the future may have to also be added to the VM.</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Notify the group that this thread is about to be started</span></span><br><span class="line"><span class="comment">        * so that it can be added to the group&#x27;s list of threads</span></span><br><span class="line"><span class="comment">        * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class="line">       group.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           start0();</span><br><span class="line">           started = <span class="keyword">true</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                   group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">               <span class="comment">/* do nothing. If start0 threw a Throwable then</span></span><br><span class="line"><span class="comment">                 it will be passed up the call stack */</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-run-方法"><a href="#2-run-方法" class="headerlink" title="2. run 方法"></a>2. run 方法</h4><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><ol>
<li>执行该线程任务</li>
</ol>
<p>​</p>
<p>​</p>
<h5 id="源码解读-1"><a href="#源码解读-1" class="headerlink" title="源码解读"></a>源码解读</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * If this thread was constructed using a separate</span></span><br><span class="line"><span class="comment">  * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class="line"><span class="comment">  * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class="line"><span class="comment">  * otherwise, this method does nothing and returns.</span></span><br><span class="line"><span class="comment">  * &lt;p&gt;</span></span><br><span class="line"><span class="comment">  * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #start()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #stop()</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">         target.run();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-面试题"><a href="#3-面试题" class="headerlink" title="3. 面试题"></a>3. 面试题</h4><p>​</p>
<ol>
<li>两次调用 start 方法会出现什么情况？</li>
</ol>
<p>参考 start 方法源码解读</p>
<ol start="2">
<li>为什么不能直接调用 run 方法</li>
</ol>
<p>start 方法用于创建新的线程，如果直接调用 run 方法则是有 main 线程调用 run 方法<br>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartAndRunMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Runnable runnable = () -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        &#125;;</span><br><span class="line">        runnable.run();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">main</span><br><span class="line">Thread-<span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-停止线程"><a href="#3-停止线程" class="headerlink" title="3. 停止线程"></a>3. 停止线程</h2><p><strong>interupt 停止线程原理：通知线程停止，但是不强制停止线程。由线程的 run 方法决定是否停止。</strong></p>
<h3 id="1-正确停止线程"><a href="#1-正确停止线程" class="headerlink" title="1. 正确停止线程"></a>1. 正确停止线程</h3><p>方法 1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightWayStopThreadInProd</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程中断程序结束&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">            throwInMethod();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwInMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="comment">//sleep()、wait()等会抛中断异常的方法在抛出异常之前会清除线程的中断标识</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            Thread.currentThread().interrupt();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RightWayStopThreadInProd());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法 2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RightWayStopThreadInProd2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;go&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                throwInMethod();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">throwInMethod</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> RightWayStopThreadInProd2());</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-错误的停止方法"><a href="#2-错误的停止方法" class="headerlink" title="2. 错误的停止方法"></a>2. 错误的停止方法</h3><ol>
<li>调用 stop 方法</li>
<li>用 volatile 设置 boolean 标记位</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WrongWayVolatile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        BlockingQueue blockingQueue = <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">30</span>);</span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(blockingQueue);</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(producer);</span><br><span class="line">        Consumer consumer = <span class="keyword">new</span> Consumer(blockingQueue);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!consumer.needMoreNums()) &#123;</span><br><span class="line"></span><br><span class="line">                producer.canceled = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            Object take = blockingQueue.take();</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者开始消费&quot;</span> + take);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> canceled = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue blockingQueue;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(BlockingQueue blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (num &lt;= <span class="number">10000</span> &amp;&amp; !canceled) &#123;<span class="comment">//线程中断的地方</span></span><br><span class="line">                <span class="keyword">if</span> (num % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    blockingQueue.put(num);<span class="comment">//导致线程不能中断的地方是由于put一直处于阻塞状态</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;生产者生产完成&quot;</span> + num);</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                num++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;生产结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 概率约为95%的随机消费</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">needMoreNums</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> random = Math.random();</span><br><span class="line">        <span class="keyword">if</span> (random &gt; <span class="number">0.96</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BlockingQueue blockingQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(BlockingQueue blockingQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.blockingQueue = blockingQueue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-线程的生命周期"><a href="#4-线程的生命周期" class="headerlink" title="4. 线程的生命周期"></a>4. 线程的生命周期</h2><h3 id="1-线程的-6-种状态"><a href="#1-线程的-6-种状态" class="headerlink" title="1. 线程的 6 种状态"></a>1. 线程的 6 种状态</h3><ul>
<li>New 创建了线程但是没有执行 start 方法</li>
<li>Runnable 调用了 start 方法后变成 Runnable 状态</li>
<li>Blocked 线程进入<strong>Synchronized 修饰的方法或者代码块</strong>但是锁被其他线程拿走</li>
<li>Waiting wait() 、Thread.join() 、LockSupport.park() 只能等待唤醒信号唤醒</li>
<li>Timed Waiting wait(time) sleep(time) join(time) parkNanos(time) parkUntiil(time) 等待信号唤醒或超时</li>
<li>Terminated</li>
</ul>
<p>​</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1632994078056-1d0b44a7-e1ec-4a61-b1f4-7357293c0a0a.png#clientId=uc78e1191-c90c-4&from=paste&height=431&id=u441c7a4d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=861&originWidth=803&originalType=binary&ratio=1&size=307491&status=done&style=none&taskId=u5a1795f8-b0dd-45e6-bbb3-ffcafc2e65e&width=401.5" alt="image.png"></p>
<h3 id="2-阻塞状态"><a href="#2-阻塞状态" class="headerlink" title="2. 阻塞状态"></a>2. 阻塞状态</h3><p>Blocked、Waiting、TimedWaiting</p>
<h2 id="5-Thread-类和-Object-类线程方法详解"><a href="#5-Thread-类和-Object-类线程方法详解" class="headerlink" title="5. Thread 类和 Object 类线程方法详解"></a>5. Thread 类和 Object 类线程方法详解</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633157925874-a5caca19-3c10-41d3-b92f-393282718634.png#clientId=ud9dfac8a-0ab2-4&from=paste&height=388&id=u2fd4f1a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=775&originWidth=1590&originalType=binary&ratio=1&size=962383&status=done&style=none&taskId=u92fdbb0c-ee29-4830-89c4-fdac321aa81&width=795" alt="image.png"></p>
<h3 id="1-wait、notify、notifyAll-方法详解"><a href="#1-wait、notify、notifyAll-方法详解" class="headerlink" title="1. wait、notify、notifyAll 方法详解"></a>1. wait、notify、notifyAll 方法详解</h3><ol>
<li>阻塞阶段</li>
</ol>
<p>执行 wait 方法进入阻塞阶段</p>
<p>唤醒方法</p>
<ul>
<li>其他线程调用 notify 方法刚好唤醒阻塞线程</li>
<li>调用 notifyAll 唤醒所有阻塞线程</li>
<li>过了超时时间，自动唤醒</li>
<li>线程自身调用 interupt 方法</li>
</ul>
<p>​</p>
<ol start="2">
<li>唤醒阶段</li>
</ol>
<p>通过调用 notify 或者 notifyAll 方法<br>​</p>
<ol start="3">
<li>遇到中断</li>
</ol>
<h3 id="2-wait、notify、notifyAll-特点和性质"><a href="#2-wait、notify、notifyAll-特点和性质" class="headerlink" title="2. wait、notify、notifyAll 特点和性质"></a>2. wait、notify、notifyAll 特点和性质</h3><ul>
<li>调用 wait 方法之前必须要拥有 monitor</li>
<li>notify 只能唤醒其中一个</li>
<li>都属于 object 类</li>
</ul>
<h3 id="3-wait-原理"><a href="#3-wait-原理" class="headerlink" title="3. wait 原理"></a>3. wait 原理</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633185389200-d6496003-0e72-419a-ada9-11f03a0eadd2.png#clientId=ud9dfac8a-0ab2-4&from=paste&height=347&id=u54b8a244&margin=%5Bobject%20Object%5D&name=image.png&originHeight=693&originWidth=739&originalType=binary&ratio=1&size=390644&status=done&style=none&taskId=u8858d183-b105-4207-a257-d1802c0f057&width=369.5" alt="image.png"></p>
<ol>
<li>线程进入线程节点集</li>
<li>线程节点集中的节点尝试获取锁</li>
<li>调用 wait 方法释放锁进入等待集</li>
<li>等待集中的线程等待其他线程调用 notify、notifyAll 方法将线程唤醒（线程由等待状态转为 Blocked）</li>
<li>重新唤醒的线程尝试重新获取锁</li>
<li>释放锁并退出</li>
</ol>
<h3 id="4-join-方法"><a href="#4-join-方法" class="headerlink" title="4. join 方法"></a>4. join 方法</h3><ol>
<li>作用</li>
</ol>
<p>因为新的线程要加入我们，所以我们等他执行完再执行</p>
<ol start="2">
<li>用法</li>
</ol>
<p>主线程等待需要加入的线程执行完毕<br>​</p>
<p>​</p>
<h2 id="6-线程未被捕获异常"><a href="#6-线程未被捕获异常" class="headerlink" title="6. 线程未被捕获异常"></a>6. 线程未被捕获异常</h2><h3 id="1-异常处理器解决方法"><a href="#1-异常处理器解决方法" class="headerlink" title="1. 异常处理器解决方法"></a>1. 异常处理器解决方法</h3><ol>
<li>在 run 方法中捕获异常并处理</li>
<li>实现 UncaughtExceptionHandler 接口</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633315130302-db04aac5-f7b3-47cd-a64d-27568b1185d0.png#clientId=u23d15eed-d2bc-4&from=paste&height=165&id=u7bb4f8b8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=330&originWidth=789&originalType=binary&ratio=1&size=49802&status=done&style=none&taskId=udbf3fc47-8b17-486c-a35f-833cd6c5e81&width=394.5" alt="image.png"></p>
<p>源码解析<br>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断线程是否存在父线程的异常处理器</span></span><br><span class="line">       <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">           parent.uncaughtException(t, e);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//获取线程默认异常处理器</span></span><br><span class="line">           Thread.UncaughtExceptionHandler ueh =</span><br><span class="line">               Thread.getDefaultUncaughtExceptionHandler();</span><br><span class="line">           <span class="keyword">if</span> (ueh != <span class="keyword">null</span>) &#123;</span><br><span class="line">              <span class="comment">//调用线程默认异常处理器</span></span><br><span class="line">               ueh.uncaughtException(t, e);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!(e <span class="keyword">instanceof</span> ThreadDeath)) &#123;</span><br><span class="line">               <span class="comment">//没有直接打印异常</span></span><br><span class="line">               System.err.print(<span class="string">&quot;Exception in thread \&quot;&quot;</span></span><br><span class="line">                                + t.getName() + <span class="string">&quot;\&quot; &quot;</span>);</span><br><span class="line">               e.printStackTrace(System.err);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-自定义异常处理器"><a href="#2-自定义异常处理器" class="headerlink" title="2. 自定义异常处理器"></a>2. 自定义异常处理器</h3><ol>
<li>实现 Thread.UncaughtExceptionHandler 的 uncaught 方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread t, Throwable e)</span> </span>&#123;</span><br><span class="line">        Logger logger=Logger.getAnonymousLogger();</span><br><span class="line">        logger.log(Level.WARNING,<span class="string">&quot;自定义异常处理器&quot;</span>+t.getName(),e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置线程异常处理器</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseOwnUncaughtExceptionHandler</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">new</span> MyUncaughtExceptionHandler());</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> UseOwnUncaughtExceptionHandler());</span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="7-线程安全"><a href="#7-线程安全" class="headerlink" title="7. 线程安全"></a>7. 线程安全</h2><h3 id="1-什么是线程安全"><a href="#1-什么是线程安全" class="headerlink" title="1. 什么是线程安全"></a>1. 什么是线程安全</h3><p><strong>多个线程访问某个对象或方法时，在编写方法或对象的业务逻辑时，不需要做额外的处理（可以像单线程编程一样），程序可以正常运行（不会因为多线程而出错）</strong><br><strong>​</strong></p>
<h3 id="2-线程安全问题"><a href="#2-线程安全问题" class="headerlink" title="2. 线程安全问题"></a>2. 线程安全问题</h3><ol>
<li>运行结果错误：a++多线程问题</li>
<li>活跃性问题：死锁、活锁、饥饿</li>
<li>对象发布和初始化安全问题</li>
</ol>
<p><strong>​</strong></p>
<h2 id="8-死锁"><a href="#8-死锁" class="headerlink" title="8. 死锁"></a>8. 死锁</h2><h3 id="1-死锁概念"><a href="#1-死锁概念" class="headerlink" title="1. 死锁概念"></a>1. 死锁概念</h3><p>特点</p>
<ul>
<li>发生在并发中</li>
<li>互不相让</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633750091741-d8a67152-fa3d-4dc5-9ae7-e7092e9bbd04.png#clientId=u71005f6c-83ec-4&from=paste&height=301&id=uf260c5fc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=602&originWidth=1298&originalType=binary&ratio=1&size=98661&status=done&style=none&taskId=ubca3f96e-a8ce-4c24-806c-6610f5939f4&width=649" alt="image.png"></p>
<h3 id="2-死锁事例"><a href="#2-死锁事例" class="headerlink" title="2. 死锁事例"></a>2. 死锁事例</h3><ol>
<li>两个用户转账</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/9</span></span><br><span class="line"><span class="comment"> * 转账时遇到死锁情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferMoney</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Account from = <span class="keyword">new</span> Account(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">static</span> Account to = <span class="keyword">new</span> Account(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TransferMoney user1 = <span class="keyword">new</span> TransferMoney();</span><br><span class="line">        TransferMoney user2 = <span class="keyword">new</span> TransferMoney();</span><br><span class="line">        user1.flag = <span class="number">0</span>;</span><br><span class="line">        user2.flag = <span class="number">1</span>;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(user1);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(user2);</span><br><span class="line">        thread.start();</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread.join();</span><br><span class="line">        thread1.join();</span><br><span class="line">        System.out.println(from.balance);</span><br><span class="line">        System.out.println(to.balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">0</span>) &#123;</span><br><span class="line">            transferMoney(from, to, <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            transferMoney(to, from, <span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">transferMoney</span><span class="params">(Account from, Account to, <span class="keyword">int</span> account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (from) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (to) &#123;</span><br><span class="line">                <span class="keyword">if</span> (from.balance - account &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    System.out.println(from + <span class="string">&quot;转账用户余额不足&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                from.balance -= account;</span><br><span class="line">                to.balance += account;</span><br><span class="line">                System.out.println(from + <span class="string">&quot;转账成功&quot;</span> + account + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> balance;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">int</span> balance)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.balance = balance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>多个用户转账</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiTransferMoney</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_ACCOUNT = <span class="number">500</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 账户初始化金额数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_MONEY = <span class="number">10000</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUMS_TRANSFERS = <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NUM_THREDS = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Random rdm = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransferMoney.Account[] accounts = <span class="keyword">new</span> TransferMoney.Account[NUMS_ACCOUNT];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMS_ACCOUNT; i++) &#123;</span><br><span class="line">            accounts[i] = <span class="keyword">new</span> TransferMoney.Account(NUMS_MONEY);</span><br><span class="line">        &#125;</span><br><span class="line">        ExecutorService threadPool = Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM_THREDS; i++) &#123;</span><br><span class="line">            threadPool.execute(<span class="keyword">new</span> TransferMoneyThread());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferMoneyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUMS_TRANSFERS; i++) &#123;</span><br><span class="line">                <span class="keyword">int</span> accountFromIndex;</span><br><span class="line">                <span class="keyword">int</span> accountToIndex;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    accountFromIndex = rdm.nextInt(NUMS_ACCOUNT);</span><br><span class="line">                    accountToIndex = rdm.nextInt(NUMS_ACCOUNT);</span><br><span class="line">                &#125; <span class="keyword">while</span> (accountFromIndex == accountToIndex);</span><br><span class="line">                <span class="keyword">int</span> money = rdm.nextInt(NUMS_MONEY);</span><br><span class="line">                TransferMoney.transferMoney(accounts[accountFromIndex], accounts[accountToIndex], money);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;转账结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="3-死锁条件"><a href="#3-死锁条件" class="headerlink" title="3. 死锁条件"></a>3. 死锁条件</h3><ol>
<li>**互斥条件 **</li>
<li><strong>请求与保持条件</strong></li>
<li><strong>不剥夺条件</strong></li>
<li><strong>循环等待条件</strong></li>
</ol>
<h3 id="4-定位死锁"><a href="#4-定位死锁" class="headerlink" title="4. 定位死锁"></a>4. 定位死锁</h3><h4 id="1-Jstack"><a href="#1-Jstack" class="headerlink" title="1. Jstack"></a>1. Jstack</h4><ol>
<li>通过 jps 获取 Java 运行程序的 pid</li>
<li>通过 jstack pid 查看对应程序的死锁情况</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">J:\JavaBase\cocurrency_tools_practice&gt;jps</span><br><span class="line">16672 TransferMoney</span><br><span class="line">17784</span><br><span class="line">19592 Jps</span><br><span class="line">4236 Launcher</span><br><span class="line"></span><br><span class="line">J:\JavaBase\cocurrency_tools_practice&gt;jstack 16672</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-修复死锁"><a href="#5-修复死锁" class="headerlink" title="5. 修复死锁"></a>5. 修复死锁</h3><h3 id="1-避免策略"><a href="#1-避免策略" class="headerlink" title="1. 避免策略"></a>1. 避免策略</h3><h1 id="2-并发高级"><a href="#2-并发高级" class="headerlink" title="2. 并发高级"></a>2. 并发高级</h1><h2 id="1-线程池"><a href="#1-线程池" class="headerlink" title="1. 线程池"></a>1. 线程池</h2><h3 id="1-线程池的停止"><a href="#1-线程池的停止" class="headerlink" title="1. 线程池的停止"></a>1. 线程池的停止</h3><ol>
<li>shutdown** 关闭线程池，但是线程池需要正在执行的任务和队列中的任务执行完之后关闭**</li>
<li>shutdownNow 立刻关闭线程池，并返回任务队列中的任务。同时中断正在执行的任务</li>
<li>isShutdown 判断线程是否关闭</li>
<li>isTerminated 判断线程池是否终止运行</li>
<li>awaitTermination 判断线程池在判断延后的时间范围内线程池是否终止</li>
</ol>
<p>​</p>
<h3 id="2-拒绝策略"><a href="#2-拒绝策略" class="headerlink" title="2. 拒绝策略"></a>2. 拒绝策略</h3><ul>
<li>AbortPolicy 直接抛出异常</li>
<li>DiscardPolicy 直接抛弃任务</li>
<li>DiscardOldestPolicy 直接抛弃执行时间最长的任务</li>
<li>CallerRunsPolicy 直接返回给调用者</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="3-实现原理"><a href="#3-实现原理" class="headerlink" title="3. 实现原理"></a>3. 实现原理</h3><h4 id="1-组成部分"><a href="#1-组成部分" class="headerlink" title="1. 组成部分"></a>1. 组成部分</h4><ul>
<li>线程池管理器</li>
<li>工作线程</li>
<li>任务队列</li>
<li>任务接口</li>
</ul>
<p>​</p>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633444509426-74410e03-652a-40bb-98dd-0dedffb69f41.png#clientId=u23d15eed-d2bc-4&from=paste&height=276&id=u332b0768&margin=%5Bobject%20Object%5D&name=image.png&originHeight=551&originWidth=909&originalType=binary&ratio=1&size=125603&status=done&style=none&taskId=u9bf42bec-bf47-4811-bca8-b174bdd8f30&width=454.5" alt="image.png"></p>
<p><strong>线程池架构图</strong><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633444552891-52b344e1-6a04-43cd-adc0-bca35a432040.png#clientId=u23d15eed-d2bc-4&from=paste&height=213&id=u2e1fbaed&margin=%5Bobject%20Object%5D&name=image.png&originHeight=425&originWidth=623&originalType=binary&ratio=1&size=63702&status=done&style=none&taskId=u366f33eb-8333-4327-b1f0-d1db3fe43f4&width=311.5" alt="image.png"></p>
<ul>
<li>Executor 线程池顶级接口</li>
<li>ExecutorService 线程池业务接口</li>
</ul>
<p>​</p>
<p><strong>线程池任务复用原理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">      	<span class="comment">//获取线程池状态</span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//判断线程池状态以及任务队列是否满了</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//调用addWorker创建新的工作线程</span></span><br><span class="line">   <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">        Worker w = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">            <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">            <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">                mainLock.lock();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                    <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                    <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                    <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                        workers.add(w);</span><br><span class="line">                        <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                            largestPoolSize = s;</span><br><span class="line">                        workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    mainLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                    t.start();</span><br><span class="line">                    workerStarted = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">                addWorkerFailed(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> workerStarted;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//然后调用runWorker执行当前线程的任务</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">        Thread wt = Thread.currentThread();</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">                <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">                <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">                <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                     (Thread.interrupted() &amp;&amp;</span><br><span class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                    !wt.isInterrupted())</span><br><span class="line">                    wt.interrupt();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(wt, task);</span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;</span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>线程池状态</strong></p>
<ul>
<li>Running 接受新任务并排队处理任务</li>
<li>Shutdown 不接受新任务，但处理正在运行任务</li>
<li>Stop 不接受新任务 ，也不处理队列任务，并中断正在运行任务</li>
<li>Tidying 所有任务都终止，所有工作线程为 0 并接下来执行 terminated（）钩子方法</li>
<li>Terminated 运行完成</li>
</ul>
<h2 id="2-ThreadLocal"><a href="#2-ThreadLocal" class="headerlink" title="2. ThreadLocal"></a>2. ThreadLocal</h2><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1. 使用场景"></a>1. 使用场景</h3><p>​</p>
<ol>
<li>每个线程需要一个独享的对象（工具类对象 SimpleDateFormat 和 Random）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> threadlocal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.SimpleFormatter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/4</span></span><br><span class="line"><span class="comment"> * ThreadLocal 存放工日期格式化具类对象</span></span><br><span class="line"><span class="comment"> * 每个线程都需要存放一个独享的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreadLocalNormalUsage</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String &gt; dateSet = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadPoolExecutor poolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            poolExecutor.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    dateParse(finalI);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dateParse</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date(<span class="number">1000</span> * i);</span><br><span class="line">                    SimpleDateFormat dateFormat = ThreadLocalDateFormatter.dateFormatThreadLocal.get();</span><br><span class="line">                    dateSet.add(dateFormat.format(date));</span><br><span class="line">                    System.out.println(dateFormat.format(date));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(dateSet.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalDateFormatter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; dateFormatThreadLocal =</span><br><span class="line">            ThreadLocal.withInitial(() -&gt; <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>每个线程内需要保存全局变量，可以不同方法直接使用，避免传递参数的麻烦</li>
</ol>
<h3 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h3><ol>
<li>多线程，对象数据数据隔离</li>
<li>多线程下，轻松获取获取全局变量</li>
</ol>
<p>​</p>
<h3 id="3-好处"><a href="#3-好处" class="headerlink" title="3. 好处"></a>3. 好处</h3><ul>
<li>线程安全</li>
<li>不需要加锁，提高效率</li>
<li>线程池的情况下，节省内存开销</li>
<li>免去多线程情况下传参麻烦</li>
</ul>
<p>​</p>
<p>​</p>
<h3 id="3-原理-、源码分析"><a href="#3-原理-、源码分析" class="headerlink" title="3. 原理 、源码分析"></a>3. 原理 、源码分析</h3><p><strong>主要方法</strong><br>​</p>
<ol>
<li><strong>initialValue()</strong></li>
</ol>
<ul>
<li>返回当前线程对应的初始值，延迟加载只有第一次调用 get 时候才会触发。</li>
<li>当线程先前调用了 set()，则不会调用 initialValue()方法</li>
<li>线程最多只能调用一次该方法，除非调用 remove()删除了对应的数据，在调用 get</li>
<li>不重写默认返回 null</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">//获取当前线程的ThreadLocalMap</span></span><br><span class="line">     ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">//如果对应的map不为空</span></span><br><span class="line">     <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">//通过map获取对应的值</span></span><br><span class="line">         ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">         <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">             T result = (T)e.value;</span><br><span class="line">             <span class="keyword">return</span> result;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//反之则调用初始化方法</span></span><br><span class="line">     <span class="keyword">return</span> setInitialValue();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>​</strong></p>
<p><strong>​</strong></p>
<ol start="2">
<li><strong>set()</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>ThreadLocalMap 类</strong><br><strong>​</strong></p>
<p><strong>键：ThreadLocal 对象</strong><br><strong>值：存储对应的值</strong><br><strong>​</strong></p>
<p><strong>ThreadLocal 哈希冲突解决办法：线性探测法（发生冲突判断下一个位置是否为空）</strong><br><strong>​</strong></p>
<p><strong>​</strong></p>
<p><strong>​</strong></p>
<h3 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4. 注意点"></a>4. 注意点</h3><ul>
<li><strong>内存泄漏问题</strong>（对象不在使用，但却无法回收）</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<p>​</p>
<h2 id="3-AQS"><a href="#3-AQS" class="headerlink" title="3. AQS"></a>3. AQS</h2><h3 id="1-原理解析"><a href="#1-原理解析" class="headerlink" title="1. 原理解析"></a>1. 原理解析</h3><h4 id="1-State-状态"><a href="#1-State-状态" class="headerlink" title="1. State 状态"></a>1. State 状态</h4><p>在不同的并发类中有不同的含义<br>Semaphore 剩余许可证的数量<br>CountDownLatch 需要倒数的数量<br>ReentrantLock 表示可重入锁的次数 当 state 表示锁不被任何线程持有</p>
<h4 id="2-FIFO-队列"><a href="#2-FIFO-队列" class="headerlink" title="2.FIFO 队列"></a>2.FIFO 队列</h4><ul>
<li>存放等待线程的双向队列</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633511736158-4641796b-4219-464d-af3b-079fff214722.png#clientId=u8f654df0-be2a-4&from=paste&height=89&id=uab7d1c76&margin=%5Bobject%20Object%5D&name=image.png&originHeight=178&originWidth=897&originalType=binary&ratio=1&size=82969&status=done&style=none&taskId=u6d281669-be18-4155-9118-8281cc4ac50&width=448.5" alt="image.png"></p>
<h4 id="3-工具类实现的获取-释放方法"><a href="#3-工具类实现的获取-释放方法" class="headerlink" title="3. 工具类实现的获取/释放方法"></a>3. 工具类实现的获取/释放方法</h4><ol>
<li>获取方法（<strong>导致线程阻塞</strong>）</li>
</ol>
<ul>
<li>ReentrantLock 判断 state 是否为 0，如果不为为 0 则会阻塞</li>
<li>Semaphore 通过 acquire 方法获取到 state,判断 state 是否为正数，是则 state-1 可以获取一个许可证</li>
<li>CountDownLatch 通过 await 获取 state，判断是否等于 0，如果为 0 则唤醒，反之阻塞</li>
</ul>
<p>​</p>
<p>​</p>
<ol start="2">
<li>释放方法</li>
</ol>
<ul>
<li>Semaphore 通过使用 release 方法使 state+1</li>
<li>CountDownLatch countDown 方法</li>
</ul>
<p>​</p>
<p>​</p>
<p>​</p>
<h4 id="4-源码分析"><a href="#4-源码分析" class="headerlink" title="4. 源码分析"></a>4. 源码分析</h4><h5 id="1-CountDownLatch-源码分析"><a href="#1-CountDownLatch-源码分析" class="headerlink" title="1. CountDownLatch 源码分析"></a>1. CountDownLatch 源码分析</h5><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633512858997-9e24ac55-ed62-41b7-a171-c921b56cec76.png#clientId=u8f654df0-be2a-4&from=paste&height=119&id=uabb32415&margin=%5Bobject%20Object%5D&name=image.png&originHeight=237&originWidth=672&originalType=binary&ratio=1&size=49318&status=done&style=none&taskId=ue0c7eba3-0a06-47bf-9d14-b1c1925f2f9&width=336" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/12394516/1633573965910-d310e60f-33ca-4d66-be34-7e47a28dd28c.png#clientId=u5713b59d-1bde-4&from=paste&height=303&id=u0979f993&margin=%5Bobject%20Object%5D&name=image.png&originHeight=605&originWidth=917&originalType=binary&ratio=1&size=221272&status=done&style=none&taskId=u1e32547a-e975-4d63-bd2b-a1a588f6639&width=458.5" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CountDownLatch</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (count &lt; <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;count &lt; 0&quot;</span>);</span><br><span class="line">       <span class="keyword">this</span>.sync = <span class="keyword">new</span> Sync(count);</span><br><span class="line">   &#125;</span><br><span class="line"> 		Sync(<span class="keyword">int</span> count) &#123;</span><br><span class="line">           setState(count);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> newState)</span> </span>&#123;</span><br><span class="line">       state = newState;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> getState();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//线程等待直到倒数结束</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">     <span class="comment">//判断是否倒数结束</span></span><br><span class="line">       <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">           doAcquireSharedInterruptibly(arg);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">       <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">     <span class="comment">//将线程包装成一个node节点然后放入队列然后中断该线程</span></span><br><span class="line">       <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">       <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">               <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                   <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                   <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                       setHeadAndPropagate(node, r);</span><br><span class="line">                       p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                       failed = <span class="keyword">false</span>;</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="2-Semaphore-源码分析"><a href="#2-Semaphore-源码分析" class="headerlink" title="2. Semaphore 源码分析"></a>2. Semaphore 源码分析</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">	<span class="comment">//获取资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        sync.acquireSharedInterruptibly(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireSharedInterruptibly</span><span class="params">(<span class="keyword">int</span> arg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">        <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">                <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                    <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                    <span class="comment">//如果state大于0则将线程放入阻塞队列</span></span><br><span class="line">                    <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        setHeadAndPropagate(node, r);</span><br><span class="line">                        p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                        failed = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                    parkAndCheckInterrupt())</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> InterruptedException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (failed)</span><br><span class="line">                cancelAcquire(node);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//公平锁的方式获取资源state</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> available = getState();</span><br><span class="line">                <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//非公平锁的方式获取资源state</span></span><br><span class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nonfairTryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> available = getState();</span><br><span class="line">                <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="3-ReentrantLock"><a href="#3-ReentrantLock" class="headerlink" title="3. ReentrantLock"></a>3. ReentrantLock</h5><p>​</p>
<p><strong>释放锁</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//尝试释放当前线程的锁</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">    <span class="comment">//判断当前线程是否持有锁</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">            <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    		<span class="comment">//判断state是否为0</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                free = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">//释放锁</span></span><br><span class="line">                setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            setState(c);</span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>流程：<br>判断当前锁对应的线程是不是该线程如果是直接 state-1,不是抛出异常，减到 0 就返回 true。并且释放当前线程的锁</p>
<p><strong>加锁方法</strong><br><strong>​</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.lock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非公平加锁的实现</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//通过cas判断其他线程是否持有锁</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="comment">//尝试获取锁</span></span><br><span class="line">                acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">         <span class="comment">//判断锁是否被持有</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//判断锁的线程和当前线程是否是同一线程</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//公平锁加锁</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                    compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                    setExclusiveOwnerThread(current);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">                <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">                setState(nextc);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-实现简化版-ConuntDownLatch"><a href="#2-实现简化版-ConuntDownLatch" class="headerlink" title="2. 实现简化版 ConuntDownLatch"></a>2. 实现简化版 ConuntDownLatch</h3><p>步骤：</p>
<ol>
<li>创建一个类，实现获取/释放的方法</li>
<li>写一个内部类 Sync 继承 AbstractQueuedSynchronizer</li>
<li>根据锁是否独占来重写 tryAcquire/tryRelease 或 tryAcquireShared 和 tryReleaseShared 等方法</li>
</ol>
<p>​</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aqs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.AbstractQueuedSynchronizer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: xin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2021/10/7</span></span><br><span class="line"><span class="comment"> * 自定义一次性门闩</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OneShortLatch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.releaseShared(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">await</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquireShared(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span> ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            setState(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        OneShortLatch oneShortLatch = <span class="keyword">new</span> OneShortLatch();</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;尝试获取latch&quot;</span>);</span><br><span class="line">                oneShortLatch.await();</span><br><span class="line">                System.out.println(<span class="string">&quot;门闩调用了放行方法&quot;</span>);</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        oneShortLatch.signal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JUC</tag>
        <tag>Java高级</tag>
      </tags>
  </entry>
</search>
